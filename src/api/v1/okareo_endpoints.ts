/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v0/projects": {
    /**
     * Get All Projects
     * @description Get a list of projects for this organization
     *
     * Returns:
     *     a list of requested projects
     */
    get: operations["get_all_projects_v0_projects_get"];
    /**
     * Create Project
     * @description Create a project
     *
     * Returns:
     *     the id, name, and tags for the created project
     */
    post: operations["create_project_v0_projects_post"];
  };
  "/v0/projects/{project_id}": {
    /**
     * Get Project
     * @description Get a project
     *
     * Returns:
     *     the requested project
     */
    get: operations["get_project_v0_projects__project_id__get"];
    /**
     * Update Project
     * @description Update a project
     *
     * Returns:
     *     the requested project
     */
    put: operations["update_project_v0_projects__project_id__put"];
  };
  "/v0/generate_api_token": {
    /** Generate Api Token */
    post: operations["generate_api_token_v0_generate_api_token_post"];
  };
  "/v0/onboarding_status": {
    /**
     * Update Onboarding Status
     * @description Update the onboarding completion status for the organization
     *
     * Args:
     *     status (str): The new onboarding completion status
     *
     * Returns:
     *     str: The updated onboarding completion status
     */
    put: operations["update_onboarding_status_v0_onboarding_status_put"];
  };
  "/v0/generate_slack_auth_url": {
    /**
     * Generate Slack Auth Url
     * @description Generates a Slack authentication URL with a temporary authorization token.
     *
     * Args:
     *     request: The HTTP request containing project_id in the body
     *     db: Database session
     *
     * Returns:
     *     dict: Contains the Slack authentication URL
     */
    post: operations["generate_slack_auth_url_v0_generate_slack_auth_url_post"];
  };
  "/v0/slack": {
    /** Slack Oauth Callback */
    get: operations["slack_oauth_callback_v0_slack_get"];
  };
  "/v0/scenario_sets": {
    /**
     * Get Scenario Sets
     * @description Find all scenario sets based on either the project id or the scenario id
     *
     * Returns:
     *     a list of scenario sets (project id) or a list of scenarios (scenario id)
     */
    get: operations["get_scenario_sets_v0_scenario_sets_get"];
    /**
     * Create Scenario Set
     * @description Triggers a generation of a test scenario set, could be long running.
     * This scenario set can now be used for testing on a model.
     *
     * Returns:
     *     Object: generation result with '201 Created' status code on success.
     */
    post: operations["create_scenario_set_v0_scenario_sets_post"];
  };
  "/v0/scenario_sets/{scenario_id}": {
    /**
     * Update Scenario Set
     * @description Update a Scenario Set
     *
     * Returns:
     *     the updated Scenario Set
     */
    put: operations["update_scenario_set_v0_scenario_sets__scenario_id__put"];
    /**
     * Delete Scenario Set
     * @description Deletes the scenario set and cascades deletes to all related entities.
     * Namely, Evaluations, Evaluation Datapoints, and  Model Datapoints
     *
     * !! Use With Caution !!
     *
     * Raises:
     *     HTTPException: 404 if scenario_id is not found
     *
     * Returns: 204 status code on successful deletion
     */
    delete: operations["delete_scenario_set_v0_scenario_sets__scenario_id__delete"];
  };
  "/v0/scenario_sets_upload": {
    /**
     * Scenario Sets Upload
     * @description Upload new scenarios
     *
     * Returns:
     *     the Scenario Set with the uploaded scenarios
     */
    post: operations["scenario_sets_upload_v0_scenario_sets_upload_post"];
  };
  "/v0/scenario_sets_download/{scenario_id}": {
    /**
     * Get Scenario Sets Download
     * @description Get the scenario set for a particular scenario ID
     *
     * Returns:
     *     a list of scenarios
     */
    get: operations["get_scenario_sets_download_v0_scenario_sets_download__scenario_id__get"];
  };
  "/v0/scenario_data_points/{scenario_id}": {
    /**
     * Get Scenario Set Data Points
     * @description Get all scenarios datapoints
     *
     * Returns:
     *     a list of scenario datapoints
     */
    get: operations["get_scenario_set_data_points_v0_scenario_data_points__scenario_id__get"];
  };
  "/v0/scenario_sets_generate": {
    /**
     * Generate Scenario Set
     * @description Triggers a generation of a scenario set based on either a source scenario ID or a list of source scenario rows.
     * Generation can run long depending on number of source rows, number of examples, and generation type/prompt.
     * Optionally save the generated scenario, allowing a registered model to use the generated scenario set for testing.
     *
     * Returns:
     *     Object: generation result with '201 Created' status code on success.
     */
    post: operations["generate_scenario_set_v0_scenario_sets_generate_post"];
  };
  "/v0/find_datapoints": {
    /**
     * Get Datapoints
     * @description Gets all the datapoints for given search criteria.
     *
     * Returns:
     *     list: An array of datapoint objects.
     */
    post: operations["get_datapoints_v0_find_datapoints_post"];
  };
  "/v0/find_datapoints_filter": {
    /**
     * Get Datapoints Filter
     * @description Gets all the datapoints for given search criteria.
     *
     * Returns:
     *     list: An array of datapoint objects.
     */
    post: operations["get_datapoints_filter_v0_find_datapoints_filter_post"];
  };
  "/v0/filter_counts": {
    /**
     * Get Datapoint Counts
     * @description Gets only the counts for datapoints matching given filter criteria without retrieving the actual data.
     *
     * Returns:
     *     dict: Object containing filtered_count and total_count
     */
    post: operations["get_datapoint_counts_v0_filter_counts_post"];
  };
  "/v0/filters": {
    /**
     * Get Filters
     * @description Get all datapoint filters for a project.
     * Defaults to a 90-day lookback window.
     *
     * Args:
     *     request: The FastAPI request object
     *     project_id: UUID of the project to get filters for
     *
     * Returns:
     *     List of filter items for the project
     */
    get: operations["get_filters_v0_filters_get"];
    /**
     * Create Filter
     * @description Create a new datapoint filter.
     *
     * Args:
     *     request: The FastAPI request object
     *     payload: Filter creation payload containing conditions and metadata
     *
     * Returns:
     *     The created filter objects
     */
    post: operations["create_filter_v0_filters_post"];
    /**
     * Delete Filter
     * @description Delete a datapoint filter.
     *
     * Args:
     *     request: The FastAPI request object
     *     payload: Filter deletion payload containing filter ID
     */
    delete: operations["delete_filter_v0_filters_delete"];
  };
  "/v0/filters/{filter_group_id}": {
    /**
     * Get Filter
     * @description Get a specific datapoint filter.
     *
     * Args:
     *     request: The FastAPI request object
     *     project_id: UUID of the project the filter belongs to
     *     filter_group_id: UUID of the specific filter group to retrieve
     *
     * Returns:
     *     The requested filter item
     */
    get: operations["get_filter_v0_filters__filter_group_id__get"];
    /**
     * Update Filter
     * @description Update an existing datapoint filter. Allows update on the name, description, and checks fields.
     *
     * Args:
     *     request: The FastAPI request object
     *     filter_group_id: UUID of the filter group to update
     *     payload: Filter creation payload containing conditions and metadata
     *
     * Returns:
     *     The created filter object
     */
    put: operations["update_filter_v0_filters__filter_group_id__put"];
  };
  "/v0/filters/metadata": {
    /**
     * Get Filters Metadata
     * @description Get all viable user-defined metadata column names for filters.
     *
     * Args:
     *     request: The FastAPI request object
     *
     * Returns:
     *     List of key names of across all user metadata columns
     */
    get: operations["get_filters_metadata_v0_filters_metadata_get"];
  };
  "/v0/summary_datapoints": {
    /**
     * Get Datapoints Summary
     * @description Expects a date range and returns a summary of datapoint counts by group and feedback range.
     * Defaults to 90-day lookback window.
     *
     * Returns:
     *     list: An array of datapoint objects.
     */
    post: operations["get_datapoints_summary_v0_summary_datapoints_post"];
  };
  "/v0/datapoints": {
    /**
     * Add Datapoint
     * @description Add a datapoint for a particular registered model
     *
     * Returns:
     *     Empty ressponse with 201 status code on success.
     */
    post: operations["add_datapoint_v0_datapoints_post"];
  };
  "/v0/datapoints/{datapoint_id}": {
    /**
     * Update Datapoint
     * @description Update a datapoint
     *
     * Returns:
     *     the updated datapoint
     */
    put: operations["update_datapoint_v0_datapoints__datapoint_id__put"];
  };
  "/v0/traces": {
    /** Receive Traces */
    post: operations["receive_traces_v0_traces_post"];
  };
  "/v0/register_model": {
    /**
     * Register Model
     * @description Register a model for testing. This model can then be tested using a scenario set.
     *
     * Returns:
     *     the id of the registered model
     */
    post: operations["register_model_v0_register_model_post"];
  };
  "/v0/models_under_test/{mut_id}": {
    /**
     * Get Model Under Test
     * @description Get a model under test
     *
     * Returns:
     *     the requested model under test
     */
    get: operations["get_model_under_test_v0_models_under_test__mut_id__get"];
    /**
     * Update Model Under Test
     * @description Update a model under test
     *
     * Returns:
     *     the updated model under test
     */
    put: operations["update_model_under_test_v0_models_under_test__mut_id__put"];
  };
  "/v0/models_under_test": {
    /**
     * Get All Models Under Test
     * @description Get a list of models under test for this organization
     *
     * Returns:
     *     a list of requested models under test
     */
    get: operations["get_all_models_under_test_v0_models_under_test_get"];
  };
  "/v0/groups": {
    /**
     * Get Groups
     * @description Get all groups for the current organization and project.
     *
     * Returns:
     *     A list of groups
     */
    get: operations["get_groups_v0_groups_get"];
    /**
     * Create Group
     * @description Create a new group for models under test or return existing group with the same name.
     *
     * Returns:
     *     The group's details (either newly created or existing)
     */
    post: operations["create_group_v0_groups_post"];
  };
  "/v0/groups/{group_id}/models": {
    /**
     * Get Models In Group
     * @description Get all models in a specific group.
     *
     * Returns:
     *     A list of models in the group
     */
    get: operations["get_models_in_group_v0_groups__group_id__models_get"];
    /**
     * Add Model To Group
     * @description Add a model to a group.
     *
     * Returns:
     *     A success message
     */
    post: operations["add_model_to_group_v0_groups__group_id__models_post"];
  };
  "/v0/groups/{group_id}": {
    /**
     * Update Group
     * @description Update a group
     *
     * Returns:
     *     the updated group
     */
    put: operations["update_group_v0_groups__group_id__put"];
  };
  "/v0/groups/{group_id}/trace_eval": {
    /**
     * Create Trace Eval
     * @description Create a trace evaluation for a group
     *
     * Returns:
     *     The created trace evaluation details
     */
    post: operations["create_trace_eval_v0_groups__group_id__trace_eval_post"];
  };
  "/v0/traces/{group_id}/datapoints": {
    /**
     * Get Datapoints In Group Trace
     * @description Get all datapoints in a specific group.
     *
     * Returns:
     *     A list of datapoints in the group
     */
    get: operations["get_datapoints_in_group_trace_v0_traces__group_id__datapoints_get"];
  };
  "/v0/find_test_runs": {
    /** Find Test Run */
    post: operations["find_test_run_v0_find_test_runs_post"];
  };
  "/v0/test_runs/{test_run_id}": {
    /**
     * Get Test Run
     * @description Get a Test Run
     *
     * Returns:
     *     the Test Run
     */
    get: operations["get_test_run_v0_test_runs__test_run_id__get"];
    /**
     * Update Test Run
     * @description Update a Test Run
     * Returns:
     *     the updated Test Run
     */
    put: operations["update_test_run_v0_test_runs__test_run_id__put"];
  };
  "/v0/test_runs": {
    /**
     * Delete Test Run
     * @description Deletes one or more test runs and cascades deletes to all related entities, including datapoints.
     *
     * !! Use With Caution !!
     *
     * Args:
     *     test_run_ids: List of UUIDs to delete
     *
     * Raises:
     *     HTTPException: 404 if any test_run_id is not found
     *     HTTPException: 422 if test_run_ids list is empty or invalid
     *
     * Returns: 204 status code on successful deletion
     */
    delete: operations["delete_test_run_v0_test_runs_delete"];
  };
  "/v0/test_run": {
    /** Run Test */
    post: operations["run_test_v0_test_run_post"];
  };
  "/v0/test_run/submit": {
    /** Submit Test */
    post: operations["submit_test_v0_test_run_submit_post"];
  };
  "/v0/evaluate": {
    /** Evaluate */
    post: operations["evaluate_v0_evaluate_post"];
  };
  "/v0/test_run/create_failure_scenario/{test_run_id}": {
    /**
     * Create Failure Scenario
     * @description Create a ScenarioSet using the failed data points from a TestRun.
     *
     * Returns:
     *     the new Failure Scenario response
     */
    post: operations["create_failure_scenario_v0_test_run_create_failure_scenario__test_run_id__post"];
  };
  "/v0/test_data_point": {
    /**
     * Add Test Data Point
     * @description Add a test run metric
     *
     * Returns:
     *     The persisted test run metric item
     */
    post: operations["add_test_data_point_v0_test_data_point_post"];
  };
  "/v0/test_data_points/{test_data_point_id}": {
    /**
     * Get Test Data Point
     * @description Get a Test Run
     *
     * Returns:
     *     the Test Run
     */
    get: operations["get_test_data_point_v0_test_data_points__test_data_point_id__get"];
  };
  "/v0/find_test_data_points": {
    /**
     * Find Test Data Points
     * @description Find Test Data Point
     *
     * Returns:
     *     a list of Test Data Points
     */
    post: operations["find_test_data_points_v0_find_test_data_points_post"];
  };
  "/v0/update_test_data_point": {
    /**
     * Update Test Data Point
     * @description Find Test Data Point
     *
     * Returns:
     *     a list of Test Data Points
     */
    post: operations["update_test_data_point_v0_update_test_data_point_post"];
  };
  "/v0/internal_custom_model_listener": {
    /** Internal Custom Model Listener */
    get: operations["internal_custom_model_listener_v0_internal_custom_model_listener_get"];
  };
  "/v0/custom_endpoint_stub/create": {
    /**
     * Create Assistant Thread
     * @description Creates a new OpenAI Assistant thread with an initial system message.
     *
     * Returns:
     *     AssistantThreadResponse: Contains the thread_id for future messages
     */
    post: operations["create_assistant_thread_v0_custom_endpoint_stub_create_post"];
  };
  "/v0/custom_endpoint_stub/message": {
    /**
     * Send Assistant Message
     * @description Sends a new message to an existing OpenAI Assistant thread and returns the response.
     *
     * Args:
     *     payload: Contains thread_id and the user message
     *
     * Returns:
     *     AssistantMessageResponse: Contains the assistant's response
     */
    post: operations["send_assistant_message_v0_custom_endpoint_stub_message_post"];
  };
  "/v0/check_generate": {
    /**
     * Check Generate
     * @description Generate code for an evaluator for testing.
     * Returns:
     *     the evaluator object with the generated code
     */
    post: operations["check_generate_v0_check_generate_post"];
  };
  "/v0/check_create_or_update": {
    /**
     * Check Create Or Update
     * @description Create or get check
     *
     * Returns:
     *     the check object with its ID
     */
    post: operations["check_create_or_update_v0_check_create_or_update_post"];
  };
  "/v0/check/{check_id}": {
    /**
     * Get Check
     * @description Get a check
     *
     * Raises:
     *     HTTPException: 404 if check_id is not found
     *
     * Returns: the check
     */
    get: operations["get_check_v0_check__check_id__get"];
    /**
     * Check Delete
     * @description Deletes a check
     *
     * Raises:
     *     HTTPException: 404 if check_id is not found
     *
     * Returns: 204 status code on successful deletion
     */
    delete: operations["check_delete_v0_check__check_id__delete"];
  };
  "/v0/checks": {
    /**
     * Get All Checks
     * @description Get a list of checks for this organization
     *
     * Returns:
     *     a list of requested checks
     */
    get: operations["get_all_checks_v0_checks_get"];
  };
  "/v0/check_upload": {
    /**
     * Check Upload
     * @description Upload a new check
     *
     * Returns:
     *     the check object with its ID
     */
    post: operations["check_upload_v0_check_upload_post"];
  };
  "/v0/setup_filter_group_notification": {
    /**
     * Setup Filter Group Notification
     * @description Set up or manage a notification for a specific filter group.
     *
     * Args:
     *     request: The HTTP request
     *     filter_group_id: The ID of the filter group to set up notifications for
     *     notification_type: The type of notification channel ("slack" or "email" only for now)
     *     status: Whether to enable ("on") or disable ("off") notifications
     *     cooldown_seconds: The cooldown period in seconds for notifications (default of 0 will use default cooldowns of 24 hours (email) and 1 minute (slack)).
     *
     * Returns:
     *     dict: Details about the notification configuration
     */
    post: operations["setup_filter_group_notification_v0_setup_filter_group_notification_post"];
  };
  "/v0/filter_group_notifications": {
    /**
     * Get Filter Group Notifications
     * @description Get all notification settings for filter groups in the current project.
     *
     * This endpoint retrieves information about all filter groups with notification
     * configurations, including their enabled status and channel types (email/slack).
     *
     * Args:
     *     request: The HTTP request
     *
     * Returns:
     *     list: A list of dictionaries containing notification settings for each filter group
     */
    get: operations["get_filter_group_notifications_v0_filter_group_notifications_get"];
  };
  "/v0/notifications": {
    /**
     * Get All Notification
     * @description Retrieve a specific notification configuration.
     */
    get: operations["get_all_notification__v0_notifications_get"];
    /**
     * Update Notification Settings
     * @description Update notification settings for the current project.
     */
    put: operations["update_notification_settings_v0_notifications_put"];
    /**
     * Delete Notification History Config
     * @description Update notification settings for the current project.
     */
    delete: operations["delete_notification_history_config_v0_notifications_delete"];
  };
  "/v0/notification_history": {
    /**
     * Get Notification History
     * @description Get notification history for the current project and organization.
     * Only returns records where contents is populated.
     *
     * Args:
     *     request: The HTTP request
     *
     * Returns:
     *     list: A list of notification history records with populated contents
     */
    get: operations["get_notification_history_v0_notification_history_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AssistantMessageRequest */
    AssistantMessageRequest: {
      /** Thread Id */
      thread_id: string;
      /** Message */
      message: string;
    };
    /** AssistantMessageResponse */
    AssistantMessageResponse: {
      /** Thread Id */
      thread_id: string;
      /** Assistant Response */
      assistant_response: string;
      /** Message Id */
      message_id: string;
    };
    /** AssistantThreadResponse */
    AssistantThreadResponse: {
      /** Thread Id */
      thread_id: string;
    };
    /** Body_check_delete_v0_check__check_id__delete */
    Body_check_delete_v0_check__check_id__delete: {
      /**
       * Name
       * @description Name of the Check to delete
       */
      name: string;
    };
    /** Body_check_upload_v0_check_upload_post */
    Body_check_upload_v0_check_upload_post: {
      /**
       * Name
       * @description Name of the Check
       */
      name: string;
      /**
       * Description
       * @description Description of the Check
       * @default No description provided
       */
      description?: string;
      /**
       * Requires Scenario Input
       * @description Whether the check requires scenario input
       */
      requires_scenario_input: boolean;
      /**
       * Requires Scenario Result
       * @description Whether the check requires scenario expected result
       */
      requires_scenario_result: boolean;
      /**
       * Output Data Type
       * @description Check output data type (i.e., bool, int, float)
       */
      output_data_type?: string;
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * File
       * Format: binary
       */
      file?: string;
      /**
       * Update
       * @description Update the check
       * @default false
       */
      update?: boolean;
    };
    /** Body_scenario_sets_upload_v0_scenario_sets_upload_post */
    Body_scenario_sets_upload_v0_scenario_sets_upload_post: {
      /**
       * Project Id
       * Format: uuid
       * @description Project ID or None for default project
       */
      project_id?: string;
      /**
       * Name
       * @description Name of the Scenario Set
       */
      name: string;
      /**
       * File
       * Format: binary
       */
      file?: string;
    };
    /** CheckCreateUpdateSchema */
    CheckCreateUpdateSchema: {
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /** Check Config */
      check_config?: {
        [key: string]: string;
      };
      /**
       * Project Id
       * Format: uuid
       * @description ID of the project
       */
      project_id?: string;
    };
    /**
     * ComparisonOperator
     * @description An enumeration.
     * @enum {string}
     */
    ComparisonOperator: "greater_than" | "less_than" | "equal" | "not_equal" | "contains" | "not_contains" | "is_set" | "not_set";
    /**
     * DatapointField
     * @description An enumeration.
     * @enum {string}
     */
    DatapointField: "id" | "input" | "input_datetime" | "result" | "result_datetime" | "feedback" | "error_message" | "error_code" | "error_type" | "context_token" | "time_created" | "model_metadata" | "latency" | "input_tokens" | "output_tokens" | "source" | "temperature" | "provider" | "request_model_name" | "response_model_name" | "tags" | "cost" | "input_tools" | "result_tool_calls" | "user_metadata" | "issue_type";
    /** DatapointFilterCreate */
    DatapointFilterCreate: {
      /**
       * Filters
       * @description List of filter conditions to apply
       */
      filters: components["schemas"]["FilterCondition"][];
      /**
       * Name
       * @description Optional name describing this filter
       */
      name?: string;
      /**
       * Description
       * @description Optional description of the filter
       */
      description?: string;
      /**
       * Checks
       * @description Optional list of checks to apply to datapoints in the filter
       */
      checks?: string[];
      /**
       * Slack Enabled
       * @description Whether to enable Slack notifications for this filter group. Default is False (off).
       * @default false
       */
      slack_enabled?: boolean;
      /**
       * Email Enabled
       * @description Whether to enable Email notifications for this filter group. Default is False (off).
       * @default false
       */
      email_enabled?: boolean;
      /**
       * Project Id
       * Format: uuid
       * @description Project ID these filters belong to
       */
      project_id?: string;
    };
    /** DatapointFilterDelete */
    DatapointFilterDelete: {
      /**
       * Filter Group Id
       * Format: uuid
       * @description ID of the filter to delete
       */
      filter_group_id: string;
    };
    /** DatapointFilterItem */
    DatapointFilterItem: {
      /**
       * Filters
       * @description List of filter conditions to apply
       */
      filters: components["schemas"]["FilterCondition"][];
      /**
       * Name
       * @description Optional name describing this filter
       */
      name?: string;
      /**
       * Description
       * @description Optional description for this filter
       */
      description?: string;
      /**
       * Checks
       * @description Checks to apply to datapoints in the filter.
       */
      checks?: string[];
      /**
       * Project Id
       * Format: uuid
       * @description Project ID these filters belong to
       */
      project_id?: string;
      /**
       * Filter Group Id
       * Format: uuid
       * @description Group ID for filter
       */
      filter_group_id?: string;
      /**
       * Latest Test Run
       * @description Group ID for filter
       */
      latest_test_run?: unknown;
      /**
       * Datapoint Count
       * @description Group ID for filter
       */
      datapoint_count?: unknown;
      /**
       * Issue Count
       * @description Count of issues for this filter
       */
      issue_count?: unknown;
      /**
       * Error Count
       * @description Count of errors for this filter
       */
      error_count?: unknown;
      /**
       * Average Metrics
       * @description Metrics for checks in this filter
       */
      average_metrics?: unknown;
      /**
       * Failed Checks
       * @description Array of failed cheßck names
       * @default []
       */
      failed_checks?: unknown;
      /**
       * Avg Latency
       * @description Average latency for completions
       */
      avg_latency?: unknown;
      /**
       * Total Cost
       * @description Total dollar cost of all completions
       */
      total_cost?: unknown;
      /**
       * Avg Num Turns
       * @description Average number of turns for completions
       */
      avg_num_turns?: unknown;
      /**
       * Slack Enabled
       * @description Whether Slack notifications are enabled for this filter group
       */
      slack_enabled?: boolean;
      /**
       * Email Enabled
       * @description Whether Email notifications are enabled for this filter group
       */
      email_enabled?: boolean;
      /**
       * Time Created
       * Format: date-time
       * @description Created datetime for this filter group
       */
      time_created?: string;
      /**
       * Time Updated
       * Format: date-time
       * @description Last updated datetime for this filter group
       */
      time_updated?: string;
    };
    /** DatapointFilterSearch */
    DatapointFilterSearch: {
      /**
       * Filters
       * @description List of filter conditions to apply
       */
      filters: components["schemas"]["FilterCondition"][];
      /**
       * Project Id
       * Format: uuid
       * @description Project ID to search within
       */
      project_id?: string;
      /**
       * Offset
       * @description Offset for pagination
       */
      offset?: number;
      /**
       * Limit
       * @description Limit for pagination
       */
      limit?: number;
      /**
       * Issues Only
       * @description Only return issues
       * @default false
       */
      issues_only?: boolean;
      /**
       * Errors Only
       * @description Only return errors
       * @default false
       */
      errors_only?: boolean;
      /**
       * Checks
       * @description List of checks to only flag issues for
       */
      checks?: unknown[];
      /**
       * Filter Group Id
       * Format: uuid
       * @description Filter group ID to search with
       */
      filter_group_id?: string;
    };
    /** DatapointFilterUpdate */
    DatapointFilterUpdate: {
      /**
       * Filters
       * @description List of filter conditions to apply
       */
      filters?: components["schemas"]["FilterCondition"][];
      /**
       * Name
       * @description Optional name describing this filter
       */
      name?: string;
      /**
       * Description
       * @description Optional description of the filter
       */
      description?: string;
      /**
       * Checks
       * @description Optional list of checks to apply to datapoints in the filter
       */
      checks?: string[];
      /**
       * Slack Enabled
       * @description Whether to enable Slack notifications for this filter group.
       */
      slack_enabled?: boolean;
      /**
       * Email Enabled
       * @description Whether to enable Email notifications for this filter group.
       */
      email_enabled?: boolean;
      /**
       * Project Id
       * Format: uuid
       * @description Project ID these filters belong to
       */
      project_id?: string;
    };
    /** DatapointListItem */
    DatapointListItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /** Input */
      input?: unknown;
      /**
       * Input Datetime
       * Format: date-time
       */
      input_datetime?: string;
      /** Result */
      result?: unknown;
      /**
       * Result Datetime
       * Format: date-time
       */
      result_datetime?: string;
      /** Feedback */
      feedback?: number;
      /** Error Message */
      error_message?: string;
      /** Error Code */
      error_code?: string;
      /** Error Type */
      error_type?: string;
      /** Context Token */
      context_token?: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created?: string;
      /** Model Metadata */
      model_metadata?: unknown;
      /**
       * Project Id
       * Format: uuid
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       */
      mut_id?: string;
      /**
       * Test Run Id
       * Format: uuid
       */
      test_run_id?: string;
      /**
       * Group Id
       * Format: uuid
       */
      group_id?: string;
      /**
       * Scenario Data Point Id
       * Format: uuid
       */
      scenario_data_point_id?: string;
      /** Latency */
      latency?: number;
      /** Input Tokens */
      input_tokens?: number;
      /** Output Tokens */
      output_tokens?: number;
      /** Source */
      source?: string;
      /** Temperature */
      temperature?: string;
      /** Input Tools */
      input_tools?: Record<string, never>[];
      /** Result Tool Calls */
      result_tool_calls?: Record<string, never>[];
      /** Result Embeddings */
      result_embeddings?: Record<string, never>[];
      /**
       * Checks
       * @default {}
       */
      checks?: Record<string, never>;
      /** Agent Metadata */
      agent_metadata?: unknown;
      /** Provider */
      provider?: string;
      /** Total Search Count */
      total_search_count?: number;
      /** Total Datapoint Count */
      total_datapoint_count?: number;
      /** Request Model Name */
      request_model_name?: string;
      /** Response Model Name */
      response_model_name?: string;
      /** Cost */
      cost?: number;
      /**
       * Status
       * @default
       */
      status?: string;
      /**
       * Failed Checks
       * @description Array of failed check names
       * @default []
       */
      failed_checks?: string[];
      /**
       * Resolved
       * @description Manual marking from user on resolved status
       * @default false
       */
      resolved?: boolean;
      /**
       * User Metadata
       * @description User-provided metadata provided as context to the completion call.
       */
      user_metadata?: unknown;
    };
    /** DatapointResponse */
    DatapointResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       */
      mut_id?: string;
    };
    /** DatapointSchema */
    DatapointSchema: {
      /**
       * Mut Id
       * Format: uuid
       * @description Model ID
       */
      mut_id?: string;
      /**
       * Input
       * Format: json-string
       * @description Inputted value into the model
       */
      input?: string;
      /**
       * Input Datetime
       * Format: date-time
       * @description Datetime for the input
       */
      input_datetime?: string;
      /**
       * Result
       * Format: json-string
       * @description Outputted value from the model based on the input
       */
      result?: string;
      /**
       * Result Datetime
       * Format: date-time
       * @description Datetime for the result
       */
      result_datetime?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter datapoints in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Feedback
       * @description Feedback is a 0 to 1 float value that captures user feedback range for related datapoint results
       */
      feedback?: number;
      /** Error Message */
      error_message?: string;
      /** Error Code */
      error_code?: string;
      /**
       * Context Token
       * @description Context token is a unique token to link various datapoints which originate from the same context
       */
      context_token?: string;
      /**
       * Test Run Id
       * Format: uuid
       * @description ID of testrun
       */
      test_run_id?: string;
      /**
       * Group Id
       * Format: uuid
       * @description ID of the group
       */
      group_id?: string;
      /**
       * Model Metadata
       * Format: json-string
       * @description Additional metadata about the model used for this datapoint
       */
      model_metadata?: string;
      /**
       * Input Metadata
       * Format: json-string
       * @description Metadata about the input
       */
      input_metadata?: string;
      /**
       * Result Metadata
       * Format: json-string
       * @description Metadata about the result
       */
      result_metadata?: string;
    };
    /** DatapointSearch */
    DatapointSearch: {
      /**
       * Tags
       * @description Tags are strings that can be used to filter datapoints in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * From Date
       * Format: date-time
       * @description Earliest date
       * @default 2022-12-31T23:59:59.999999
       */
      from_date?: string;
      /**
       * To Date
       * Format: date-time
       * @description Latest date
       */
      to_date?: string;
      /**
       * Feedback
       * @description Feedback is a 0 to 1 float value that captures user feedback range for related datapoint results
       */
      feedback?: number;
      /** Error Code */
      error_code?: string;
      /**
       * Context Token
       * @description Context token is a unique token to link various datapoints which originate from the same context
       */
      context_token?: string;
      /**
       * Project Id
       * @description Project ID
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       * @description Model ID
       */
      mut_id?: string;
      /**
       * Test Run Id
       * Format: uuid
       * @description Test run ID
       */
      test_run_id?: string;
      /**
       * Search Value
       * @description Search substring that is matched against input, result, context_token, tags, or time_created fields
       */
      search_value?: string;
      /**
       * Offset
       * @description Offset for pagination
       */
      offset?: number;
      /**
       * Limit
       * @description Limit for pagination
       */
      limit?: number;
      /**
       * Datapoint Ids
       * @description List of datapoint IDs to filter by
       */
      datapoint_ids?: string[];
    };
    /** DatapointSummaryItem */
    DatapointSummaryItem: {
      /**
       * Group
       * @description The group name or datetime for the data summary.
       */
      group: string;
      /**
       * Feedback Ranges
       * @description List of feedback range summaries for the date.
       */
      feedback_ranges?: components["schemas"]["FeedbackRangeSummary"][];
      /**
       * Datapoints
       * @description The total count of datapoints for the group.
       */
      datapoints: number;
      /**
       * Issues
       * @description The total count of issues for the group.
       */
      issues: number;
      /**
       * Errors
       * @description The total count of errors for the group.
       */
      errors: number;
      /**
       * Avg Latency
       * @description The average latency for the group.
       */
      avg_latency?: number;
      /**
       * Sum Cost
       * @description The total cost for the group.
       */
      sum_cost?: number;
      /**
       * User Metadata
       * @description Number of distinct values found for each key in user metadata for the group.
       */
      user_metadata?: unknown;
    };
    /** DatapointTagsSchema */
    DatapointTagsSchema: {
      /**
       * Tags
       * @description Tags are strings that can be used to filter datapoints in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Resolved
       * @description If the datapoint is resolved or not
       */
      resolved?: boolean;
    };
    /** ErrorResponse */
    ErrorResponse: {
      /** Detail */
      detail: string;
    };
    /** EvaluationPayload */
    EvaluationPayload: {
      /**
       * Scenario Id
       * Format: uuid
       * @description ID of the scenario set to evaluate
       */
      scenario_id?: string;
      /**
       * Datapoint Ids
       * @description List of datapoint IDs to filter by
       */
      datapoint_ids?: string[];
      /**
       * Metrics Kwargs
       * @description Dictionary of metrics to be measured
       * @default {}
       */
      metrics_kwargs?: {
        [key: string]: number[] | string[];
      };
      /**
       * Filter Group Id
       * Format: uuid
       * @description ID of the datapoint filter group to apply
       */
      filter_group_id?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter test runs in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Checks
       * @description List of checks to include in the test run.
       */
      checks?: string[];
      /**
       * @description The type of test run will determine which relevant model metrics should be calculated
       * @default MULTI_CLASS_CLASSIFICATION
       */
      type?: components["schemas"]["TestRunType"];
      /**
       * Name
       * @description Name of the test run
       */
      name?: string;
      /**
       * Project Id
       * Format: uuid
       * @description Project ID
       */
      project_id?: string;
    };
    /** EvaluatorBriefResponse */
    EvaluatorBriefResponse: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /** Name */
      name?: string;
      /**
       * Description
       * @default
       */
      description?: string;
      /**
       * Output Data Type
       * @default
       */
      output_data_type?: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created?: string;
      /** Check Config */
      check_config?: Record<string, never>;
      /**
       * Is Predefined
       * @default false
       */
      is_predefined?: boolean;
    };
    /** EvaluatorDetailedResponse */
    EvaluatorDetailedResponse: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id?: string;
      /** Name */
      name?: string;
      /**
       * Description
       * @default
       */
      description?: string;
      /** Requires Scenario Input */
      requires_scenario_input?: boolean;
      /** Requires Scenario Result */
      requires_scenario_result?: boolean;
      /**
       * Output Data Type
       * @default
       */
      output_data_type?: string;
      /**
       * Code Contents
       * @default
       */
      code_contents?: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created?: string;
      /** Warning */
      warning?: string;
      /** Check Config */
      check_config?: Record<string, never>;
      /**
       * Is Predefined
       * @default false
       */
      is_predefined?: boolean;
    };
    /** EvaluatorGenerateResponse */
    EvaluatorGenerateResponse: {
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /** Requires Scenario Input */
      requires_scenario_input?: boolean;
      /** Requires Scenario Result */
      requires_scenario_result?: boolean;
      /** Output Data Type */
      output_data_type?: string;
      /** Generated Code */
      generated_code?: string;
      /** Generated Prompt */
      generated_prompt?: string;
      /** Warning */
      warning?: string;
    };
    /** EvaluatorSpecRequest */
    EvaluatorSpecRequest: {
      /**
       * Name
       * @description Name of the evaluator
       */
      name?: string;
      /**
       * Description
       * @description Description for the evaluator.
       *             When this request is sent to generate an evaluator, this field will be used to generate it.
       */
      description?: string;
      /**
       * Requires Scenario Input
       * @description Whether the evaluator requires scenario input
       * @default false
       */
      requires_scenario_input?: boolean;
      /**
       * Requires Scenario Result
       * @description Whether the evaluator requires scenario expected result
       * @default false
       */
      requires_scenario_result?: boolean;
      /**
       * Output Data Type
       * @description Evaluator output data type (i.e., bool, int, float)
       */
      output_data_type?: string;
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Check Type
       * @description model or code based check
       * @default code
       */
      check_type?: string;
    };
    /** FeedbackRangeSummary */
    FeedbackRangeSummary: {
      /**
       * Feedback Range Start
       * @description The start of the feedback range.
       */
      feedback_range_start?: number;
      /**
       * Count
       * @description The total count of feedbacks in the specified range for the given date.
       */
      count: number;
    };
    /** FilterCondition */
    FilterCondition: {
      /** @description Field to filter on */
      field: components["schemas"]["DatapointField"];
      /**
       * Field Key
       * @description Key of the User Metadata field to filter on. Ignored for other 'field' values
       */
      field_key?: string;
      /** @description Comparison operator to use */
      operator: components["schemas"]["ComparisonOperator"];
      /**
       * Value
       * @description Value to compare against
       */
      value: string;
    };
    /** FindTestDataPointPayload */
    FindTestDataPointPayload: {
      /**
       * Id
       * Format: uuid
       * @description ID of the datapoint
       */
      id?: string;
      /**
       * Test Run Id
       * Format: uuid
       * @description ID of the test run
       */
      test_run_id?: string;
      /**
       * Scenario Data Point Id
       * Format: uuid
       * @description ID of the scenario data point
       */
      scenario_data_point_id?: string;
      /** Metric Type */
      metric_type?: string;
      /**
       * Full Data Point
       * @default false
       */
      full_data_point?: boolean;
    };
    /** FullDataPointItem */
    FullDataPointItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Tags */
      tags?: string[];
      /**
       * Scenario Data Point Id
       * Format: uuid
       */
      scenario_data_point_id?: string;
      /**
       * Test Run Id
       * Format: uuid
       */
      test_run_id: string;
      /** Metric Type */
      metric_type: string;
      /** Metric Value */
      metric_value: Record<string, never>;
      /** Model Input */
      model_input?: unknown;
      /** Model Result */
      model_result?: unknown;
      /** Scenario Input */
      scenario_input?: Record<string, never> | unknown[] | string;
      /** Scenario Result */
      scenario_result?: Record<string, never> | unknown[] | string;
      /** Model Metadata */
      model_metadata?: unknown;
      /** Time Created */
      time_created?: string;
      /** Checks */
      checks?: unknown;
      /** End Time */
      end_time?: unknown;
    };
    /** GeneralFindPayload */
    GeneralFindPayload: {
      /**
       * Id
       * Format: uuid
       * @description ID for the testrun
       */
      id?: string;
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       * @description ID of the model
       */
      mut_id?: string;
      /**
       * Scenario Set Id
       * Format: uuid
       * @description ID of the scenario set
       */
      scenario_set_id?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter test runs in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Return Model Metrics
       * @description Boolean value indicating if model metrics should be returned. This increases the response size.
       * @default false
       */
      return_model_metrics?: boolean;
      /**
       * Return Error Matrix
       * @description Boolean value indicating if error matrix should be returned. This increases the response size.
       * @default false
       */
      return_error_matrix?: boolean;
    };
    /**
     * GenerationTone
     * @description An enumeration.
     * @enum {unknown}
     */
    GenerationTone: "Neutral" | "Formal" | "Informal" | "Abbreviated Informal" | "Persuasive" | "Empathetic";
    /** GroupSchema */
    GroupSchema: {
      /**
       * Name
       * @description Name of the group
       */
      name?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter groups in the Okareo app
       * @default []
       */
      tags?: string[];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** ModelUnderTestResponse */
    ModelUnderTestResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /** Name */
      name: string;
      /** Models */
      models?: {
        [key: string]: Record<string, never>;
      };
      /** Tags */
      tags: string[];
      /** Time Created */
      time_created: string;
      /** Datapoint Count */
      datapoint_count?: number;
      /**
       * App Link
       * @description This URL links to the Okareo webpage for this model
       * @default
       */
      app_link?: string;
      /** Warning */
      warning?: string;
    };
    /** ModelUnderTestSchema */
    ModelUnderTestSchema: {
      /**
       * Name
       * @description Name of the model
       */
      name?: string;
      /**
       * Models
       * @description Models to be added for testing
       */
      models?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Tags
       * @description Tags are strings that can be used to filter models in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Project Id
       * Format: uuid
       * @description ID of the project
       */
      project_id?: string;
      /**
       * Update
       * @description If set to true, the model will be updated instead of returning the existing model
       * @default false
       */
      update?: boolean;
    };
    /** ProjectResponse */
    ProjectResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /** Num Evals */
      num_evals?: number;
      /** Onboarding Status */
      onboarding_status: string;
    };
    /** ProjectSchema */
    ProjectSchema: {
      /**
       * Name
       * @description Name of the project
       */
      name?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter projects in the Okareo app
       * @default []
       */
      tags?: string[];
    };
    /** ScenarioDataPoinResponse */
    ScenarioDataPoinResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Input */
      input?: unknown;
      /** Result */
      result?: unknown;
      /**
       * Meta Data
       * @default {}
       */
      meta_data?: Record<string, never>;
    };
    /** ScenarioSetCreate */
    ScenarioSetCreate: {
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Name
       * @description Name of the scenario set
       */
      name: string;
      /**
       * Seed Data
       * @description Seed data is a list of dictionaries, each with an input and result
       */
      seed_data: components["schemas"]["SeedData"][];
      /**
       * @description Generation type of the uploaded scenario. Default is SEED.
       * @default SEED
       */
      generation_type?: components["schemas"]["ScenarioType"];
    };
    /** ScenarioSetGenerate */
    ScenarioSetGenerate: {
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Source Scenario Id
       * Format: uuid
       * @description ID for the scenario set that the generated scenario set will use as a source. Will throw an exception if 'source_scenario_rows' is also provided.
       */
      source_scenario_id?: string;
      /**
       * Source Scenario Rows
       * @description Rows for the scenario set that the generated scenario set will use as a source. Will throw an exception if 'source_scenario_id' is also provided.
       */
      source_scenario_rows?: components["schemas"]["ScenarioDataPoinResponse"][];
      /**
       * Synonym Sets
       * @description 2D list used by the generator to determine synonyms. Used with the SYNONYMS generation type.
       */
      synonym_sets?: string[][];
      /**
       * Save Generated Scenario
       * @description Whether to save the generated scenarios. Defaults to True.
       * @default true
       */
      save_generated_scenario?: boolean;
      /**
       * Name
       * @description Name of the generated scenario set
       */
      name: string;
      /**
       * Number Examples
       * @description Number of examples to be generated for the scenario set
       */
      number_examples: number;
      /**
       * @description Type of generation. Current supported scenario types are:<br />
       *         Seed: Seed data for a scenario set<br />
       *         Rephrase invariant: Results will be rephrased versions of inputs<br />
       *         Conditional: Results will be rephrased inputs represented in a conditional format<br />
       *         Text reverse question: The result will be the target question for the input<br />
       *         Text reverse label: The result will be the intent of the target question for the input
       * @default REPHRASE_INVARIANT
       */
      generation_type?: components["schemas"]["ScenarioType"];
      /**
       * @description Tone to use for scenario generation.
       * @default Neutral
       */
      generation_tone?: components["schemas"]["GenerationTone"];
      /**
       * Generation Prompt
       * @description Prompt for the generator to use when generating scenarios. Only supported by CustomGenerator type.
       */
      generation_prompt?: string;
      /**
       * Pre Template
       * @description Template for pre-processing scenario before sending it to generator
       */
      pre_template?: string;
      /**
       * Post Template
       * @description Template for post-processing scenario after generator before it's saved
       */
      post_template?: string;
      /**
       * Lock Result
       * @description Whether to lock the result of the generated scenario. Used in the Custom Generator type.
       * @default false
       */
      lock_result?: boolean;
      /**
       * Checks
       * @description List of check names or check configs to run on the generated scenarios
       * @default []
       */
      checks?: (string | Record<string, never>)[];
    };
    /** ScenarioSetResponse */
    ScenarioSetResponse: {
      /**
       * Scenario Id
       * Format: uuid
       */
      scenario_id?: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created: string;
      /** Type */
      type: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /** Name */
      name?: string;
      /**
       * Seed Data
       * @default []
       */
      seed_data?: components["schemas"]["SeedData"][];
      /**
       * Scenario Data
       * @default []
       */
      scenario_data?: components["schemas"]["ScenarioDataPoinResponse"][];
      /**
       * Failed Data
       * @default []
       */
      failed_data?: components["schemas"]["ScenarioDataPoinResponse"][];
      /**
       * Scenario Count
       * @default 0
       */
      scenario_count?: number;
      /**
       * Scenario Input
       * @default []
       */
      scenario_input?: string[];
      /**
       * App Link
       * @description This URL links to the Okareo webpage for this scenario set
       * @default
       */
      app_link?: string;
      /** Warning */
      warning?: string;
    };
    /** ScenarioSetUpdate */
    ScenarioSetUpdate: {
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created?: string;
      /**
       * Type
       * @description Generation type of scenario
       */
      type?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter scenario sets in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Name
       * @description Name of the scenario set
       */
      name?: string;
      /**
       * Seed Data
       * @description Seed data is a list of dictionaries, each with an input and result
       * @default []
       */
      seed_data?: components["schemas"]["SeedData"][];
      /**
       * Scenario Input
       * @default []
       */
      scenario_input?: string[];
    };
    /**
     * ScenarioType
     * @description An enumeration.
     * @enum {unknown}
     */
    ScenarioType: "SEED" | "REPHRASE_INVARIANT" | "CONDITIONAL" | "TEXT_REVERSE_QUESTION" | "TEXT_REVERSE_LABELED" | "TEXT_REVERSE_QUESTION_ANSWER" | "TERM_RELEVANCE_INVARIANT" | "COMMON_CONTRACTIONS" | "COMMON_MISSPELLINGS" | "SYNONYMS" | "OFF_TOPIC" | "ADVERSARIAL_QUESTION" | "WORD_INFLECTIONS" | "WORD_QWERTY_MISSPELL" | "WORD_CHARACTER_INSERTION" | "WORD_SYNONYM_EMBEDDING" | "CUSTOM_GENERATOR" | "CUSTOM_MULTI_CHUNK_GENERATOR" | "DRIVER" | "LABEL_REVERSE_INVARIANT" | "ROUNDTRIP_INVARIANT" | "NEGATION" | "NAMED_ENTITY_SUBSTITUTION";
    /** SeedData */
    SeedData: {
      /** Input */
      input?: unknown;
      /** Result */
      result?: unknown;
    };
    /** SummaryDatapointSearch */
    SummaryDatapointSearch: {
      /**
       * Project Id
       * Format: uuid
       * @description Project ID
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       * @description Model ID
       */
      mut_id?: string;
      /**
       * From Date
       * Format: date-time
       * @description Earliest date
       * @default 2022-12-31T23:59:59.999999
       */
      from_date?: string;
      /**
       * To Date
       * Format: date-time
       * @description Latest date
       */
      to_date?: string;
      /**
       * Filters
       * @description List of filter conditions to apply. Defaults to None (i.e., all datapoints).
       */
      filters?: components["schemas"]["FilterCondition"][];
      /**
       * Checks
       * @description List of checks to only flag issues for. Defaults to None (i.e., all checks).
       */
      checks?: unknown[];
      /**
       * Timezone
       * @description IANA timezone to use for date filtering/aggregation (e.g., 'America/New_York'). Defaults to None (i.e., UTC).
       */
      timezone?: string;
      /**
       * Precision
       * @description Time precision for the summary. Valid values include ['day', 'hour', 'minute']. Defaults to 'day'.
       * @default day
       */
      precision?: string;
      /**
       * Filter Group Id
       * Format: uuid
       * @description Filter group ID to search with
       */
      filter_group_id?: string;
      /**
       * Group Column
       * @description Column to group by for the summary. Overwrites the default time-based grouping for the summary.
       */
      group_column?: string;
    };
    /** TestDataPointItem */
    TestDataPointItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Tags */
      tags?: string[];
      /**
       * Scenario Data Point Id
       * Format: uuid
       */
      scenario_data_point_id: string;
      /**
       * Test Run Id
       * Format: uuid
       */
      test_run_id: string;
      /** Metric Type */
      metric_type: string;
      /** Metric Value */
      metric_value: Record<string, never>;
      /** Checks */
      checks?: unknown;
    };
    /** TestDataPointPayload */
    TestDataPointPayload: {
      /**
       * Test Run Id
       * Format: uuid
       * @description ID for the testrun
       */
      test_run_id?: string;
      /**
       * Scenario Data Point Id
       * Format: uuid
       * @description ID of the scenario data point
       */
      scenario_data_point_id?: string;
      /** Metric Type */
      metric_type?: string;
      /**
       * Metric Value
       * Format: json-string
       */
      metric_value?: string;
    };
    /** TestDataPointResponse */
    TestDataPointResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** TestRunItem */
    TestRunItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Mut Id
       * Format: uuid
       */
      mut_id?: string;
      /**
       * Scenario Set Id
       * Format: uuid
       */
      scenario_set_id?: string;
      /**
       * Filter Group Id
       * Format: uuid
       */
      filter_group_id?: string;
      /** Name */
      name?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /** Type */
      type?: string;
      /**
       * Start Time
       * Format: date-time
       */
      start_time?: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time?: string | null;
      /** Test Data Point Count */
      test_data_point_count?: number;
      /** Model Metrics */
      model_metrics?: Record<string, never>;
      /** Error Matrix */
      error_matrix?: unknown[];
      /** Status */
      status?: string;
      /**
       * Progress
       * @description Number in percent of progress of test run
       * @default 0
       */
      progress?: number;
      /**
       * App Link
       * @description This URL links to the Okareo webpage for this test run
       * @default
       */
      app_link?: string;
    };
    /** TestRunPayload */
    TestRunPayload: {
      /**
       * Mut Id
       * Format: uuid
       * @description ID of model
       */
      mut_id?: string;
      /**
       * Scenario Set Id
       * Format: uuid
       * @description ID of scenario set
       */
      scenario_set_id?: string;
      /**
       * Name
       * @description Name of test run
       */
      name?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter test runs in the Okareo app
       * @default []
       */
      tags?: string[];
      /** @description The type of test run will determine which relevant model metrics should be calculated. */
      type?: components["schemas"]["TestRunType"];
      /**
       * Start Time
       * Format: date-time
       */
      start_time?: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time?: string;
      /**
       * Calculate Model Metrics
       * @description Boolean value indicating if model metrics should be calculated
       * @default false
       */
      calculate_model_metrics?: boolean;
    };
    /** TestRunPayloadV2 */
    TestRunPayloadV2: {
      /**
       * Mut Id
       * Format: uuid
       * @description ID of the model
       */
      mut_id: string;
      /**
       * Api Keys
       * @description Dictionary that maps model type to the respective API keys
       */
      api_keys?: {
        [key: string]: string;
      };
      /**
       * Metrics Kwargs
       * @description Dictionary of metrics to be measured
       * @default {}
       */
      metrics_kwargs?: {
        [key: string]: number[] | string[];
      };
      /**
       * Name
       * @description Name of the test run
       */
      name?: string;
      /**
       * @description The type of test run will determine which relevant model metrics should be calculated
       * @default MULTI_CLASS_CLASSIFICATION
       */
      type?: components["schemas"]["TestRunType"];
      /**
       * Calculate Metrics
       * @description Boolean value indicating if metrics should be calculated for the test run
       * @default true
       */
      calculate_metrics?: boolean;
      /**
       * Tags
       * @description Tags are strings that can be used to filter test runs in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Scenario Id
       * Format: uuid
       * @description ID of the scenario set
       */
      scenario_id: string;
      /** Model Results */
      model_results?: Record<string, never>;
      /**
       * Checks
       * @description List of checks to include in the test run.
       */
      checks?: string[];
    };
    /**
     * TestRunType
     * @description An enumeration.
     * @enum {string}
     */
    TestRunType: "MULTI_CLASS_CLASSIFICATION" | "INFORMATION_RETRIEVAL" | "NL_GENERATION" | "MULTI_TURN" | "AGENT_EVAL" | "invariant";
    /** UpdateTestDataPointPayload */
    UpdateTestDataPointPayload: {
      /**
       * Ids
       * @description IDs of the datapoints to update
       */
      ids?: string[];
      /**
       * Tags
       * @description Tags are strings that can be used to filter test data points in the Okareo app
       * @default []
       */
      tags?: string[][];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Projects
   * @description Get a list of projects for this organization
   *
   * Returns:
   *     a list of requested projects
   */
  get_all_projects_v0_projects_get: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Project
   * @description Create a project
   *
   * Returns:
   *     the id, name, and tags for the created project
   */
  create_project_v0_projects_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Project
   * @description Get a project
   *
   * Returns:
   *     the requested project
   */
  get_project_v0_projects__project_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the project */
        project_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Project
   * @description Update a project
   *
   * Returns:
   *     the requested project
   */
  update_project_v0_projects__project_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description ID of the project */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Generate Api Token */
  generate_api_token_v0_generate_api_token_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Onboarding Status
   * @description Update the onboarding completion status for the organization
   *
   * Args:
   *     status (str): The new onboarding completion status
   *
   * Returns:
   *     str: The updated onboarding completion status
   */
  update_onboarding_status_v0_onboarding_status_put: {
    parameters: {
      query: {
        status: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Generate Slack Auth Url
   * @description Generates a Slack authentication URL with a temporary authorization token.
   *
   * Args:
   *     request: The HTTP request containing project_id in the body
   *     db: Database session
   *
   * Returns:
   *     dict: Contains the Slack authentication URL
   */
  generate_slack_auth_url_v0_generate_slack_auth_url_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Slack Oauth Callback */
  slack_oauth_callback_v0_slack_get: {
    parameters: {
      query: {
        code: string;
        state: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Scenario Sets
   * @description Find all scenario sets based on either the project id or the scenario id
   *
   * Returns:
   *     a list of scenario sets (project id) or a list of scenarios (scenario id)
   */
  get_scenario_sets_v0_scenario_sets_get: {
    parameters: {
      query?: {
        /** @description The ID of the scenario set */
        scenario_id?: string;
        /** @description The ID of the project */
        project_id?: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Scenario Set
   * @description Triggers a generation of a test scenario set, could be long running.
   * This scenario set can now be used for testing on a model.
   *
   * Returns:
   *     Object: generation result with '201 Created' status code on success.
   */
  create_scenario_set_v0_scenario_sets_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScenarioSetCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Scenario Set
   * @description Update a Scenario Set
   *
   * Returns:
   *     the updated Scenario Set
   */
  update_scenario_set_v0_scenario_sets__scenario_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the scenario set to modify */
        scenario_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScenarioSetUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Scenario Set
   * @description Deletes the scenario set and cascades deletes to all related entities.
   * Namely, Evaluations, Evaluation Datapoints, and  Model Datapoints
   *
   * !! Use With Caution !!
   *
   * Raises:
   *     HTTPException: 404 if scenario_id is not found
   *
   * Returns: 204 status code on successful deletion
   */
  delete_scenario_set_v0_scenario_sets__scenario_id__delete: {
    parameters: {
      query: {
        /** @description Name of the Scenario Set to delete */
        name: string;
      };
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the Scenario Set to delete */
        scenario_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Scenario Sets Upload
   * @description Upload new scenarios
   *
   * Returns:
   *     the Scenario Set with the uploaded scenarios
   */
  scenario_sets_upload_v0_scenario_sets_upload_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_scenario_sets_upload_v0_scenario_sets_upload_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Scenario Sets Download
   * @description Get the scenario set for a particular scenario ID
   *
   * Returns:
   *     a list of scenarios
   */
  get_scenario_sets_download_v0_scenario_sets_download__scenario_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the scenario set */
        scenario_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Scenario Set Data Points
   * @description Get all scenarios datapoints
   *
   * Returns:
   *     a list of scenario datapoints
   */
  get_scenario_set_data_points_v0_scenario_data_points__scenario_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the scenario set to download */
        scenario_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScenarioDataPoinResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Generate Scenario Set
   * @description Triggers a generation of a scenario set based on either a source scenario ID or a list of source scenario rows.
   * Generation can run long depending on number of source rows, number of examples, and generation type/prompt.
   * Optionally save the generated scenario, allowing a registered model to use the generated scenario set for testing.
   *
   * Returns:
   *     Object: generation result with '201 Created' status code on success.
   */
  generate_scenario_set_v0_scenario_sets_generate_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScenarioSetGenerate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Datapoints
   * @description Gets all the datapoints for given search criteria.
   *
   * Returns:
   *     list: An array of datapoint objects.
   */
  get_datapoints_v0_find_datapoints_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DatapointListItem"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Datapoints Filter
   * @description Gets all the datapoints for given search criteria.
   *
   * Returns:
   *     list: An array of datapoint objects.
   */
  get_datapoints_filter_v0_find_datapoints_filter_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointFilterSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DatapointListItem"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Datapoint Counts
   * @description Gets only the counts for datapoints matching given filter criteria without retrieving the actual data.
   *
   * Returns:
   *     dict: Object containing filtered_count and total_count
   */
  get_datapoint_counts_v0_filter_counts_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointFilterSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Filters
   * @description Get all datapoint filters for a project.
   * Defaults to a 90-day lookback window.
   *
   * Args:
   *     request: The FastAPI request object
   *     project_id: UUID of the project to get filters for
   *
   * Returns:
   *     List of filter items for the project
   */
  get_filters_v0_filters_get: {
    parameters: {
      query?: {
        lookback_start?: number;
        lookback_end?: number;
        get_baseline_metrics?: boolean;
        timezone?: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DatapointFilterItem"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Filter
   * @description Create a new datapoint filter.
   *
   * Args:
   *     request: The FastAPI request object
   *     payload: Filter creation payload containing conditions and metadata
   *
   * Returns:
   *     The created filter objects
   */
  create_filter_v0_filters_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointFilterCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DatapointFilterItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Filter
   * @description Delete a datapoint filter.
   *
   * Args:
   *     request: The FastAPI request object
   *     payload: Filter deletion payload containing filter ID
   */
  delete_filter_v0_filters_delete: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointFilterDelete"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Filter
   * @description Get a specific datapoint filter.
   *
   * Args:
   *     request: The FastAPI request object
   *     project_id: UUID of the project the filter belongs to
   *     filter_group_id: UUID of the specific filter group to retrieve
   *
   * Returns:
   *     The requested filter item
   */
  get_filter_v0_filters__filter_group_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        filter_group_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DatapointFilterItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Filter
   * @description Update an existing datapoint filter. Allows update on the name, description, and checks fields.
   *
   * Args:
   *     request: The FastAPI request object
   *     filter_group_id: UUID of the filter group to update
   *     payload: Filter creation payload containing conditions and metadata
   *
   * Returns:
   *     The created filter object
   */
  update_filter_v0_filters__filter_group_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the filter group to update */
        filter_group_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointFilterUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DatapointFilterItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Filters Metadata
   * @description Get all viable user-defined metadata column names for filters.
   *
   * Args:
   *     request: The FastAPI request object
   *
   * Returns:
   *     List of key names of across all user metadata columns
   */
  get_filters_metadata_v0_filters_metadata_get: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Datapoints Summary
   * @description Expects a date range and returns a summary of datapoint counts by group and feedback range.
   * Defaults to 90-day lookback window.
   *
   * Returns:
   *     list: An array of datapoint objects.
   */
  get_datapoints_summary_v0_summary_datapoints_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SummaryDatapointSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DatapointSummaryItem"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Add Datapoint
   * @description Add a datapoint for a particular registered model
   *
   * Returns:
   *     Empty ressponse with 201 status code on success.
   */
  add_datapoint_v0_datapoints_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DatapointResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Datapoint
   * @description Update a datapoint
   *
   * Returns:
   *     the updated datapoint
   */
  update_datapoint_v0_datapoints__datapoint_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the datapoint */
        datapoint_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointTagsSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": string;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Receive Traces */
  receive_traces_v0_traces_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Register Model
   * @description Register a model for testing. This model can then be tested using a scenario set.
   *
   * Returns:
   *     the id of the registered model
   */
  register_model_v0_register_model_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelUnderTestSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Model Under Test
   * @description Get a model under test
   *
   * Returns:
   *     the requested model under test
   */
  get_model_under_test_v0_models_under_test__mut_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the model */
        mut_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Model Under Test
   * @description Update a model under test
   *
   * Returns:
   *     the updated model under test
   */
  update_model_under_test_v0_models_under_test__mut_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the model under test */
        mut_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelUnderTestSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get All Models Under Test
   * @description Get a list of models under test for this organization
   *
   * Returns:
   *     a list of requested models under test
   */
  get_all_models_under_test_v0_models_under_test_get: {
    parameters: {
      query?: {
        /** @description The ID of the project */
        project_id?: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Groups
   * @description Get all groups for the current organization and project.
   *
   * Returns:
   *     A list of groups
   */
  get_groups_v0_groups_get: {
    parameters: {
      query: {
        /** @description The ID of the project */
        project_id: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>[];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Group
   * @description Create a new group for models under test or return existing group with the same name.
   *
   * Returns:
   *     The group's details (either newly created or existing)
   */
  create_group_v0_groups_post: {
    parameters: {
      query: {
        /** @description The name of the group */
        name: string;
        /** @description Tags for the group */
        tags?: string[];
      };
      header: {
        "api-key": string;
      };
    };
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Models In Group
   * @description Get all models in a specific group.
   *
   * Returns:
   *     A list of models in the group
   */
  get_models_in_group_v0_groups__group_id__models_get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the group */
        group_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Add Model To Group
   * @description Add a model to a group.
   *
   * Returns:
   *     A success message
   */
  add_model_to_group_v0_groups__group_id__models_post: {
    parameters: {
      query: {
        /** @description The ID of the model to add */
        model_id: string;
      };
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the group */
        group_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Group
   * @description Update a group
   *
   * Returns:
   *     the updated group
   */
  update_group_v0_groups__group_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the group */
        group_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": string;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Trace Eval
   * @description Create a trace evaluation for a group
   *
   * Returns:
   *     The created trace evaluation details
   */
  create_trace_eval_v0_groups__group_id__trace_eval_post: {
    parameters: {
      query: {
        /** @description The context token for the trace */
        context_token: string;
      };
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the group */
        group_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Datapoints In Group Trace
   * @description Get all datapoints in a specific group.
   *
   * Returns:
   *     A list of datapoints in the group
   */
  get_datapoints_in_group_trace_v0_traces__group_id__datapoints_get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the group */
        group_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Find Test Run */
  find_test_run_v0_find_test_runs_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralFindPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Test Run
   * @description Get a Test Run
   *
   * Returns:
   *     the Test Run
   */
  get_test_run_v0_test_runs__test_run_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description ID of test run */
        test_run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestRunItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Test Run
   * @description Update a Test Run
   * Returns:
   *     the updated Test Run
   */
  update_test_run_v0_test_runs__test_run_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the test run to modify */
        test_run_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TestRunPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestRunItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Test Run
   * @description Deletes one or more test runs and cascades deletes to all related entities, including datapoints.
   *
   * !! Use With Caution !!
   *
   * Args:
   *     test_run_ids: List of UUIDs to delete
   *
   * Raises:
   *     HTTPException: 404 if any test_run_id is not found
   *     HTTPException: 422 if test_run_ids list is empty or invalid
   *
   * Returns: 204 status code on successful deletion
   */
  delete_test_run_v0_test_runs_delete: {
    parameters: {
      query: {
        /** @description List of Test Run IDs to delete */
        test_run_ids: string[];
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Run Test */
  run_test_v0_test_run_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TestRunPayloadV2"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestRunItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Submit Test */
  submit_test_v0_test_run_submit_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TestRunPayloadV2"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestRunItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Evaluate */
  evaluate_v0_evaluate_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluationPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestRunItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Failure Scenario
   * @description Create a ScenarioSet using the failed data points from a TestRun.
   *
   * Returns:
   *     the new Failure Scenario response
   */
  create_failure_scenario_v0_test_run_create_failure_scenario__test_run_id__post: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the test run to use for getting failed scenario data points. */
        test_run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Add Test Data Point
   * @description Add a test run metric
   *
   * Returns:
   *     The persisted test run metric item
   */
  add_test_data_point_v0_test_data_point_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TestDataPointPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestDataPointResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Test Data Point
   * @description Get a Test Run
   *
   * Returns:
   *     the Test Run
   */
  get_test_data_point_v0_test_data_points__test_data_point_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the test data point to return */
        test_data_point_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestDataPointItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Find Test Data Points
   * @description Find Test Data Point
   *
   * Returns:
   *     a list of Test Data Points
   */
  find_test_data_points_v0_find_test_data_points_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FindTestDataPointPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": (components["schemas"]["FullDataPointItem"] | components["schemas"]["TestDataPointItem"])[];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Test Data Point
   * @description Find Test Data Point
   *
   * Returns:
   *     a list of Test Data Points
   */
  update_test_data_point_v0_update_test_data_point_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTestDataPointPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": string;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Internal Custom Model Listener */
  internal_custom_model_listener_v0_internal_custom_model_listener_get: {
    parameters: {
      query: {
        mut_id: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Assistant Thread
   * @description Creates a new OpenAI Assistant thread with an initial system message.
   *
   * Returns:
   *     AssistantThreadResponse: Contains the thread_id for future messages
   */
  create_assistant_thread_v0_custom_endpoint_stub_create_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AssistantThreadResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Send Assistant Message
   * @description Sends a new message to an existing OpenAI Assistant thread and returns the response.
   *
   * Args:
   *     payload: Contains thread_id and the user message
   *
   * Returns:
   *     AssistantMessageResponse: Contains the assistant's response
   */
  send_assistant_message_v0_custom_endpoint_stub_message_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssistantMessageRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantMessageResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Check Generate
   * @description Generate code for an evaluator for testing.
   * Returns:
   *     the evaluator object with the generated code
   */
  check_generate_v0_check_generate_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluatorSpecRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EvaluatorGenerateResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Check Create Or Update
   * @description Create or get check
   *
   * Returns:
   *     the check object with its ID
   */
  check_create_or_update_v0_check_create_or_update_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CheckCreateUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorDetailedResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Check
   * @description Get a check
   *
   * Raises:
   *     HTTPException: 404 if check_id is not found
   *
   * Returns: the check
   */
  get_check_v0_check__check_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        check_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EvaluatorDetailedResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Check Delete
   * @description Deletes a check
   *
   * Raises:
   *     HTTPException: 404 if check_id is not found
   *
   * Returns: 204 status code on successful deletion
   */
  check_delete_v0_check__check_id__delete: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        check_id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_check_delete_v0_check__check_id__delete"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get All Checks
   * @description Get a list of checks for this organization
   *
   * Returns:
   *     a list of requested checks
   */
  get_all_checks_v0_checks_get: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EvaluatorBriefResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Check Upload
   * @description Upload a new check
   *
   * Returns:
   *     the check object with its ID
   */
  check_upload_v0_check_upload_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_check_upload_v0_check_upload_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorDetailedResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Setup Filter Group Notification
   * @description Set up or manage a notification for a specific filter group.
   *
   * Args:
   *     request: The HTTP request
   *     filter_group_id: The ID of the filter group to set up notifications for
   *     notification_type: The type of notification channel ("slack" or "email" only for now)
   *     status: Whether to enable ("on") or disable ("off") notifications
   *     cooldown_seconds: The cooldown period in seconds for notifications (default of 0 will use default cooldowns of 24 hours (email) and 1 minute (slack)).
   *
   * Returns:
   *     dict: Details about the notification configuration
   */
  setup_filter_group_notification_v0_setup_filter_group_notification_post: {
    parameters: {
      query: {
        filter_group_id: string;
        notification_type: string;
        status: string;
        cooldown_seconds?: number;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Filter Group Notifications
   * @description Get all notification settings for filter groups in the current project.
   *
   * This endpoint retrieves information about all filter groups with notification
   * configurations, including their enabled status and channel types (email/slack).
   *
   * Args:
   *     request: The HTTP request
   *
   * Returns:
   *     list: A list of dictionaries containing notification settings for each filter group
   */
  get_filter_group_notifications_v0_filter_group_notifications_get: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>[];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get All Notification
   * @description Retrieve a specific notification configuration.
   */
  get_all_notification__v0_notifications_get: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Notification Settings
   * @description Update notification settings for the current project.
   */
  update_notification_settings_v0_notifications_put: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Notification History Config
   * @description Update notification settings for the current project.
   */
  delete_notification_history_config_v0_notifications_delete: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Notification History
   * @description Get notification history for the current project and organization.
   * Only returns records where contents is populated.
   *
   * Args:
   *     request: The HTTP request
   *
   * Returns:
   *     list: A list of notification history records with populated contents
   */
  get_notification_history_v0_notification_history_get: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>[];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
