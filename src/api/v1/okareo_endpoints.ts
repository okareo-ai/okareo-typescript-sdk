/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v0/projects": {
    /**
     * Get All Projects
     * @description Get a list of projects for this organization
     *
     * Returns:
     *     a list of requested projects
     */
    get: operations["get_all_projects_v0_projects_get"];
    /**
     * Create Project
     * @description Create a project
     *
     * Returns:
     *     the id, name, and tags for the created project
     */
    post: operations["create_project_v0_projects_post"];
  };
  "/v0/projects/{project_id}": {
    /**
     * Get Project
     * @description Get a project
     *
     * Returns:
     *     the requested project
     */
    get: operations["get_project_v0_projects__project_id__get"];
    /**
     * Update Project
     * @description Update a project
     *
     * Returns:
     *     the requested project
     */
    put: operations["update_project_v0_projects__project_id__put"];
  };
  "/v0/generate_api_token": {
    /** Generate Api Token */
    post: operations["generate_api_token_v0_generate_api_token_post"];
  };
  "/v0/scenario_sets": {
    /**
     * Get Scenario Sets
     * @description Find all scenario sets based on either the project id or the scenario id
     *
     * Returns:
     *     a list of scenario sets (project id) or a list of scenarios (scenario id)
     */
    get: operations["get_scenario_sets_v0_scenario_sets_get"];
    /**
     * Create Scenario Set
     * @description Triggers a generation of a test scenario set, could be long running.
     * This scenario set can now be used for testing on a model.
     *
     * Returns:
     *     Object: generation result with '201 Created' status code on success.
     */
    post: operations["create_scenario_set_v0_scenario_sets_post"];
  };
  "/v0/scenario_sets/{scenario_id}": {
    /**
     * Update Scenario Set
     * @description Update a Scenario Set
     *
     * Returns:
     *     the updated Scenario Set
     */
    put: operations["update_scenario_set_v0_scenario_sets__scenario_id__put"];
    /**
     * Delete Scenario Set
     * @description Deletes the scenario set and cascades deletes to all related entities.
     * Namely, Evaluations, Evaluation Datapoints, and  Model Datapoints
     *
     * !! Use With Caution !!
     *
     * Raises:
     *     HTTPException: 404 if scenario_id is not found
     *
     * Returns: 204 status code on successful deletion
     */
    delete: operations["delete_scenario_set_v0_scenario_sets__scenario_id__delete"];
  };
  "/v0/scenario_sets_upload": {
    /**
     * Scenario Sets Upload
     * @description Upload new scenarios
     *
     * Returns:
     *     the Scenario Set with the uploaded scenarios
     */
    post: operations["scenario_sets_upload_v0_scenario_sets_upload_post"];
  };
  "/v0/scenario_sets_download/{scenario_id}": {
    /**
     * Get Scenario Sets Download
     * @description Get the scenario set for a particular scenario ID
     *
     * Returns:
     *     a list of scenarios
     */
    get: operations["get_scenario_sets_download_v0_scenario_sets_download__scenario_id__get"];
  };
  "/v0/scenario_data_points/{scenario_id}": {
    /**
     * Get Scenario Set Data Points
     * @description Get all scenarios datapoints
     *
     * Returns:
     *     a list of scenario datapoints
     */
    get: operations["get_scenario_set_data_points_v0_scenario_data_points__scenario_id__get"];
  };
  "/v0/scenario_sets_generate": {
    /**
     * Generate Scenario Set
     * @description Triggers a generation of a scenario set based on source scenario ID, could be long running.
     * A registered model can now use this scenario set for testing.
     *
     * Returns:
     *     Object: generation result with '201 Created' status code on success.
     */
    post: operations["generate_scenario_set_v0_scenario_sets_generate_post"];
  };
  "/v0/find_datapoints": {
    /**
     * Get Datapoints
     * @description Gets all the datapoints for given search criteria.
     *
     * Returns:
     *     list: An array of datapoint objects.
     */
    post: operations["get_datapoints_v0_find_datapoints_post"];
  };
  "/v0/summary_datapoints": {
    /**
     * Get Datapoints Summary
     * @description Expects a date range and returns a summary of datapoint counts by day and feedback range.
     *
     * Returns:
     *     list: An array of datapoint objects.
     */
    post: operations["get_datapoints_summary_v0_summary_datapoints_post"];
  };
  "/v0/datapoints": {
    /**
     * Add Datapoint
     * @description Add a datapoint for a particular registered model
     *
     * Returns:
     *     Empty ressponse with 201 status code on success.
     */
    post: operations["add_datapoint_v0_datapoints_post"];
  };
  "/v0/register_model": {
    /**
     * Register Model
     * @description Register a model for testing. This model can then be tested using a scenario set.
     *
     * Returns:
     *     the id of the registered model
     */
    post: operations["register_model_v0_register_model_post"];
  };
  "/v0/models_under_test/{mut_id}": {
    /**
     * Get Model Under Test
     * @description Get a model under test
     *
     * Returns:
     *     the requested model under test
     */
    get: operations["get_model_under_test_v0_models_under_test__mut_id__get"];
    /**
     * Update Model Under Test
     * @description Update a model under test
     *
     * Returns:
     *     the updated model under test
     */
    put: operations["update_model_under_test_v0_models_under_test__mut_id__put"];
  };
  "/v0/models_under_test": {
    /**
     * Get All Models Under Test
     * @description Get a list of models under test for this organization
     *
     * Returns:
     *     a list of requested models under test
     */
    get: operations["get_all_models_under_test_v0_models_under_test_get"];
  };
  "/v0/find_test_runs": {
    /**
     * Find Test Run
     * @description Find Test Runs
     *
     * Returns:
     *     a list of Test Runs
     */
    post: operations["find_test_run_v0_find_test_runs_post"];
  };
  "/v0/test_runs/{test_run_id}": {
    /**
     * Get Test Run
     * @description Get a Test Run
     *
     * Returns:
     *     the Test Run
     */
    get: operations["get_test_run_v0_test_runs__test_run_id__get"];
  };
  "/v0/test_run": {
    /**
     * Run Test
     * @description Runs tests on a model (mut_id) using previously generated scenario.
     * Feeds the scenario data (scenario_id) into the model and evaulates results
     * depending on the test type specified.
     *
     * Returns:
     *     The test run data which includes the evaluated metrics from the run.
     */
    post: operations["run_test_v0_test_run_post"];
  };
  "/v0/test_run/create_failure_scenario/{test_run_id}": {
    /**
     * Create Failure Scenario
     * @description Create a ScenarioSet using the failed data points from a TestRun.
     *
     * Returns:
     *     the new Failure Scenario response
     */
    post: operations["create_failure_scenario_v0_test_run_create_failure_scenario__test_run_id__post"];
  };
  "/v0/test_data_point": {
    /**
     * Add Test Data Point
     * @description Add a test run metric
     *
     * Returns:
     *     The persisted test run metric item
     */
    post: operations["add_test_data_point_v0_test_data_point_post"];
  };
  "/v0/test_data_points/{test_data_point_id}": {
    /**
     * Get Test Data Point
     * @description Get a Test Run
     *
     * Returns:
     *     the Test Run
     */
    get: operations["get_test_data_point_v0_test_data_points__test_data_point_id__get"];
  };
  "/v0/find_test_data_points": {
    /**
     * Find Test Data Points
     * @description Find Test Data Point
     *
     * Returns:
     *     a list of Test Data Points
     */
    post: operations["find_test_data_points_v0_find_test_data_points_post"];
  };
  "/v0/update_test_data_point": {
    /**
     * Update Test Data Point
     * @description Find Test Data Point
     *
     * Returns:
     *     a list of Test Data Points
     */
    post: operations["update_test_data_point_v0_update_test_data_point_post"];
  };
  "/v0/internal_custom_model_listener": {
    /** Internal Custom Model Listener */
    get: operations["internal_custom_model_listener_v0_internal_custom_model_listener_get"];
  };
  "/v0/check_generate": {
    /**
     * Check Generate
     * @description Generate code for an evaluator for testing.
     * Returns:
     *     the evaluator object with the generated code
     */
    post: operations["check_generate_v0_check_generate_post"];
  };
  "/v0/check_create_or_update": {
    /**
     * Check Create Or Update
     * @description Create or get check
     *
     * Returns:
     *     the check object with its ID
     */
    post: operations["check_create_or_update_v0_check_create_or_update_post"];
  };
  "/v0/check/{check_id}": {
    /**
     * Get Check
     * @description Get a check
     *
     * Raises:
     *     HTTPException: 404 if check_id is not found
     *
     * Returns: the check
     */
    get: operations["get_check_v0_check__check_id__get"];
    /**
     * Check Delete
     * @description Deletes a check
     *
     * Raises:
     *     HTTPException: 404 if check_id is not found
     *
     * Returns: 204 status code on successful deletion
     */
    delete: operations["check_delete_v0_check__check_id__delete"];
  };
  "/v0/checks": {
    /**
     * Get All Checks
     * @description Get a list of checks for this organization
     *
     * Returns:
     *     a list of requested checks
     */
    get: operations["get_all_checks_v0_checks_get"];
  };
  "/v0/check_upload": {
    /**
     * Check Upload
     * @description Upload a new check
     *
     * Returns:
     *     the check object with its ID
     */
    post: operations["check_upload_v0_check_upload_post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_check_delete_v0_check__check_id__delete */
    Body_check_delete_v0_check__check_id__delete: {
      /**
       * Name
       * @description Name of the Check to delete
       */
      name: string;
    };
    /** Body_check_upload_v0_check_upload_post */
    Body_check_upload_v0_check_upload_post: {
      /**
       * Name
       * @description Name of the Check
       */
      name: string;
      /**
       * Description
       * @description Description of the Check
       * @default No description provided
       */
      description?: string;
      /**
       * Requires Scenario Input
       * @description Whether the check requires scenario input
       */
      requires_scenario_input: boolean;
      /**
       * Requires Scenario Result
       * @description Whether the check requires scenario expected result
       */
      requires_scenario_result: boolean;
      /**
       * Output Data Type
       * @description Check output data type (i.e., bool, int, float)
       */
      output_data_type?: string;
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * File
       * Format: binary
       */
      file?: string;
      /**
       * Update
       * @description Update the check
       * @default false
       */
      update?: boolean;
    };
    /** Body_scenario_sets_upload_v0_scenario_sets_upload_post */
    Body_scenario_sets_upload_v0_scenario_sets_upload_post: {
      /**
       * Project Id
       * Format: uuid
       * @description Project ID or None for default project
       */
      project_id?: string;
      /**
       * Name
       * @description Name of the Scenario Set
       */
      name: string;
      /**
       * File
       * Format: binary
       */
      file?: string;
    };
    /** CheckCreateUpdateSchema */
    CheckCreateUpdateSchema: {
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /** Check Config */
      check_config?: {
        [key: string]: string;
      };
      /**
       * Project Id
       * Format: uuid
       * @description ID of the project
       */
      project_id?: string;
    };
    /** DatapointListItem */
    DatapointListItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /** Input */
      input?: Record<string, never> | unknown[] | string;
      /**
       * Input Datetime
       * Format: date-time
       */
      input_datetime?: string;
      /** Result */
      result?: Record<string, never> | unknown[] | string;
      /**
       * Result Datetime
       * Format: date-time
       */
      result_datetime?: string;
      /** Feedback */
      feedback?: number;
      /** Error Message */
      error_message?: string;
      /** Error Code */
      error_code?: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created?: string;
      /** Context Token */
      context_token?: string;
      /**
       * Mut Id
       * Format: uuid
       */
      mut_id?: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id?: string;
      /**
       * Test Run Id
       * Format: uuid
       */
      test_run_id?: string;
      /** Total Search Count */
      total_search_count?: number;
    };
    /** DatapointResponse */
    DatapointResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       */
      mut_id?: string;
    };
    /** DatapointSchema */
    DatapointSchema: {
      /**
       * Mut Id
       * Format: uuid
       * @description Model ID
       */
      mut_id?: string;
      /**
       * Input
       * Format: json-string
       * @description Inputted value into the model
       */
      input?: string;
      /**
       * Input Datetime
       * Format: date-time
       * @description Datetime for the input
       */
      input_datetime?: string;
      /**
       * Result
       * Format: json-string
       * @description Outputted value from the model based on the input
       */
      result?: string;
      /**
       * Result Datetime
       * Format: date-time
       * @description Datetime for the result
       */
      result_datetime?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter datapoints in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Feedback
       * @description Feedback is a 0 to 1 float value that captures user feedback range for related datapoint results
       */
      feedback?: number;
      /** Error Message */
      error_message?: string;
      /** Error Code */
      error_code?: string;
      /**
       * Context Token
       * @description Context token is a unique token to link various datapoints which originate from the same context
       */
      context_token?: string;
      /**
       * Test Run Id
       * Format: uuid
       * @description ID of testrun
       */
      test_run_id?: string;
    };
    /** DatapointSearch */
    DatapointSearch: {
      /**
       * Tags
       * @description Tags are strings that can be used to filter datapoints in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * From Date
       * Format: date-time
       * @description Earliest date
       * @default 2022-12-31T23:59:59.999999
       */
      from_date?: string;
      /**
       * To Date
       * Format: date-time
       * @description Latest date
       */
      to_date?: string;
      /**
       * Feedback
       * @description Feedback is a 0 to 1 float value that captures user feedback range for related datapoint results
       */
      feedback?: number;
      /** Error Code */
      error_code?: string;
      /**
       * Context Token
       * @description Context token is a unique token to link various datapoints which originate from the same context
       */
      context_token?: string;
      /**
       * Project Id
       * @description Project ID
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       * @description Model ID
       */
      mut_id?: string;
      /**
       * Test Run Id
       * Format: uuid
       * @description Test run ID
       */
      test_run_id?: string;
      /**
       * Search Value
       * @description Search substring that is matched against input, result, context_token, tags, or time_created fields
       */
      search_value?: string;
      /**
       * Offset
       * @description Offset for pagination
       */
      offset?: number;
      /**
       * Limit
       * @description Limit for pagination
       */
      limit?: number;
    };
    /** DatapointSummaryItem */
    DatapointSummaryItem: {
      /**
       * Date
       * Format: date-time
       * @description The date for the data summary.
       */
      date: string;
      /**
       * Feedback Ranges
       * @description List of feedback range summaries for the date.
       * @default []
       */
      feedback_ranges?: components["schemas"]["FeedbackRangeSummary"][];
    };
    /** ErrorResponse */
    ErrorResponse: {
      /** Detail */
      detail: string;
    };
    /** EvaluatorBriefResponse */
    EvaluatorBriefResponse: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /** Name */
      name?: string;
      /**
       * Description
       * @default
       */
      description?: string;
      /**
       * Output Data Type
       * @default
       */
      output_data_type?: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created?: string;
      /** Check Config */
      check_config?: Record<string, never>;
    };
    /** EvaluatorDetailedResponse */
    EvaluatorDetailedResponse: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id?: string;
      /** Name */
      name?: string;
      /**
       * Description
       * @default
       */
      description?: string;
      /** Requires Scenario Input */
      requires_scenario_input?: boolean;
      /** Requires Scenario Result */
      requires_scenario_result?: boolean;
      /**
       * Output Data Type
       * @default
       */
      output_data_type?: string;
      /**
       * Code Contents
       * @default
       */
      code_contents?: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created?: string;
      /** Warning */
      warning?: string;
      /** Check Config */
      check_config?: Record<string, never>;
    };
    /** EvaluatorGenerateResponse */
    EvaluatorGenerateResponse: {
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /** Requires Scenario Input */
      requires_scenario_input?: boolean;
      /** Requires Scenario Result */
      requires_scenario_result?: boolean;
      /** Output Data Type */
      output_data_type?: string;
      /** Generated Code */
      generated_code?: string;
    };
    /** EvaluatorSpecRequest */
    EvaluatorSpecRequest: {
      /**
       * Name
       * @description Name of the evaluator
       */
      name?: string;
      /**
       * Description
       * @description Description for the evaluator.
       *             When this request is sent to generate an evaluator, this field will be used to generate it.
       */
      description?: string;
      /**
       * Requires Scenario Input
       * @description Whether the evaluator requires scenario input
       * @default false
       */
      requires_scenario_input?: boolean;
      /**
       * Requires Scenario Result
       * @description Whether the evaluator requires scenario expected result
       * @default false
       */
      requires_scenario_result?: boolean;
      /**
       * Output Data Type
       * @description Evaluator output data type (i.e., bool, int, float)
       */
      output_data_type?: string;
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
    };
    /** FeedbackRangeSummary */
    FeedbackRangeSummary: {
      /**
       * Feedback Range Start
       * @description The start of the feedback range.
       */
      feedback_range_start?: number;
      /**
       * Count
       * @description The total count of feedbacks in the specified range for the given date.
       */
      count: number;
    };
    /** FindTestDataPointPayload */
    FindTestDataPointPayload: {
      /**
       * Id
       * Format: uuid
       * @description ID of the datapoint
       */
      id?: string;
      /**
       * Test Run Id
       * Format: uuid
       * @description ID of the test run
       */
      test_run_id?: string;
      /**
       * Scenario Data Point Id
       * Format: uuid
       * @description ID of the scenario data point
       */
      scenario_data_point_id?: string;
      /** Metric Type */
      metric_type?: string;
      /**
       * Full Data Point
       * @default false
       */
      full_data_point?: boolean;
    };
    /** FullDataPointItem */
    FullDataPointItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Tags */
      tags?: string[];
      /**
       * Scenario Data Point Id
       * Format: uuid
       */
      scenario_data_point_id: string;
      /**
       * Test Run Id
       * Format: uuid
       */
      test_run_id: string;
      /** Metric Type */
      metric_type: string;
      /** Metric Value */
      metric_value: Record<string, never>;
      /** Model Input */
      model_input?: unknown;
      /** Model Result */
      model_result?: unknown;
      /** Scenario Input */
      scenario_input: Record<string, never> | unknown[] | string;
      /** Scenario Result */
      scenario_result: Record<string, never> | unknown[] | string;
    };
    /** GeneralFindPayload */
    GeneralFindPayload: {
      /**
       * Id
       * Format: uuid
       * @description ID for the testrun
       */
      id?: string;
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       * @description ID of the model
       */
      mut_id?: string;
      /**
       * Scenario Set Id
       * Format: uuid
       * @description ID of the scenario set
       */
      scenario_set_id?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter test runs in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Return Model Metrics
       * @description Boolean value indicating if model metrics should be returned. This increases the response size.
       * @default false
       */
      return_model_metrics?: boolean;
      /**
       * Return Error Matrix
       * @description Boolean value indicating if error matrix should be returned. This increases the response size.
       * @default false
       */
      return_error_matrix?: boolean;
    };
    /**
     * GenerationTone
     * @description An enumeration.
     * @enum {unknown}
     */
    GenerationTone: "Neutral" | "Formal" | "Informal" | "Abbreviated Informal" | "Persuasive" | "Empathetic";
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** ModelUnderTestResponse */
    ModelUnderTestResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /** Name */
      name: string;
      /** Models */
      models?: {
        [key: string]: Record<string, never>;
      };
      /** Tags */
      tags: string[];
      /** Time Created */
      time_created: string;
      /** Datapoint Count */
      datapoint_count?: number;
      /**
       * App Link
       * @description This URL links to the Okareo webpage for this model
       * @default
       */
      app_link?: string;
      /** Warning */
      warning?: string;
    };
    /** ModelUnderTestSchema */
    ModelUnderTestSchema: {
      /**
       * Name
       * @description Name of the model
       */
      name?: string;
      /**
       * Models
       * @description Models to be added for testing
       */
      models?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Tags
       * @description Tags are strings that can be used to filter models in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Project Id
       * Format: uuid
       * @description ID of the project
       */
      project_id?: string;
      /**
       * Update
       * @description If set to true, the model will be updated instead of returning the existing model
       * @default false
       */
      update?: boolean;
    };
    /** ProjectResponse */
    ProjectResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /** ProjectSchema */
    ProjectSchema: {
      /**
       * Name
       * @description Name of the project
       */
      name?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter projects in the Okareo app
       * @default []
       */
      tags?: string[];
    };
    /** ScenarioDataPoinResponse */
    ScenarioDataPoinResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Input */
      input: Record<string, never> | unknown[] | string;
      /** Result */
      result: Record<string, never> | unknown[] | string;
      /**
       * Meta Data
       * @default {}
       */
      meta_data?: Record<string, never>;
    };
    /** ScenarioSetCreate */
    ScenarioSetCreate: {
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Name
       * @description Name of the scenario set
       */
      name: string;
      /**
       * Seed Data
       * @description Seed data is a list of dictionaries, each with an input and result
       */
      seed_data: components["schemas"]["SeedData"][];
    };
    /** ScenarioSetGenerate */
    ScenarioSetGenerate: {
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Source Scenario Id
       * Format: uuid
       * @description ID for the scenario set that the generated scenario set will use as a source
       */
      source_scenario_id: string;
      /**
       * Name
       * @description Name of the generated scenario set
       */
      name: string;
      /**
       * Number Examples
       * @description Number of examples to be generated for the scenario set
       */
      number_examples: number;
      /**
       * @description Type of generation. Current supported scenario types are:<br />
       *         Seed: Seed data for a scenario set<br />
       *         Rephrase invariant: Results will be rephrased versions of inputs<br />
       *         Conditional: Results will be rephrased inputs represented in a conditional format<br />
       *         Text reverse question: The result will be the target question for the input<br />
       *         Text reverse label: The result will be the intent of the target question for the input
       * @default REPHRASE_INVARIANT
       */
      generation_type?: components["schemas"]["ScenarioType"];
      /**
       * @description Tone to use for scenario generation.
       * @default Neutral
       */
      generation_tone?: components["schemas"]["GenerationTone"];
      /**
       * Pre Template
       * @description Template for pre-processing scenario before sending it to generator
       */
      pre_template?: string;
      /**
       * Post Template
       * @description Template for post-processing scenario after generator before it's saved
       */
      post_template?: string;
    };
    /** ScenarioSetResponse */
    ScenarioSetResponse: {
      /**
       * Scenario Id
       * Format: uuid
       */
      scenario_id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created: string;
      /** Type */
      type: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /** Name */
      name?: string;
      /**
       * Seed Data
       * @default []
       */
      seed_data?: components["schemas"]["SeedData"][];
      /**
       * Scenario Count
       * @default 0
       */
      scenario_count?: number;
      /**
       * Scenario Input
       * @default []
       */
      scenario_input?: string[];
      /**
       * App Link
       * @description This URL links to the Okareo webpage for this scenario set
       * @default
       */
      app_link?: string;
      /** Warning */
      warning?: string;
    };
    /** ScenarioSetUpdate */
    ScenarioSetUpdate: {
      /**
       * Project Id
       * Format: uuid
       * @description ID for the project
       */
      project_id?: string;
      /**
       * Time Created
       * Format: date-time
       */
      time_created?: string;
      /**
       * Type
       * @description Generation type of scenario
       */
      type?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter scenario sets in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Name
       * @description Name of the scenario set
       */
      name?: string;
      /**
       * Seed Data
       * @description Seed data is a list of dictionaries, each with an input and result
       * @default []
       */
      seed_data?: components["schemas"]["SeedData"][];
      /**
       * Scenario Input
       * @default []
       */
      scenario_input?: string[];
    };
    /**
     * ScenarioType
     * @description An enumeration.
     * @enum {unknown}
     */
    ScenarioType: "SEED" | "REPHRASE_INVARIANT" | "CONDITIONAL" | "TEXT_REVERSE_QUESTION" | "TEXT_REVERSE_LABELED" | "TEXT_REVERSE_QUESTION_ANSWER" | "TERM_RELEVANCE_INVARIANT" | "COMMON_CONTRACTIONS" | "COMMON_MISSPELLINGS" | "OFF_TOPIC" | "ADVERSARIAL_QUESTION" | "WORD_INFLECTIONS" | "WORD_QWERTY_MISSPELL" | "WORD_CHARACTER_INSERTION" | "WORD_SYNONYM_EMBEDDING" | "LABEL_REVERSE_INVARIANT" | "ROUNDTRIP_INVARIANT" | "NEGATION" | "NAMED_ENTITY_SUBSTITUTION";
    /** SeedData */
    SeedData: {
      /** Input */
      input: Record<string, never> | unknown[] | string;
      /** Result */
      result: Record<string, never> | unknown[] | string;
    };
    /** SummaryDatapointSearch */
    SummaryDatapointSearch: {
      /**
       * Project Id
       * Format: uuid
       * @description Project ID
       */
      project_id?: string;
      /**
       * Mut Id
       * Format: uuid
       * @description Model ID
       */
      mut_id?: string;
      /**
       * From Date
       * Format: date-time
       * @description Earliest date
       * @default 2022-12-31T23:59:59.999999
       */
      from_date?: string;
      /**
       * To Date
       * Format: date-time
       * @description Latest date
       */
      to_date?: string;
    };
    /** TestDataPointItem */
    TestDataPointItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Tags */
      tags?: string[];
      /**
       * Scenario Data Point Id
       * Format: uuid
       */
      scenario_data_point_id: string;
      /**
       * Test Run Id
       * Format: uuid
       */
      test_run_id: string;
      /** Metric Type */
      metric_type: string;
      /** Metric Value */
      metric_value: Record<string, never>;
    };
    /** TestDataPointPayload */
    TestDataPointPayload: {
      /**
       * Test Run Id
       * Format: uuid
       * @description ID for the testrun
       */
      test_run_id?: string;
      /**
       * Scenario Data Point Id
       * Format: uuid
       * @description ID of the scenario data point
       */
      scenario_data_point_id?: string;
      /** Metric Type */
      metric_type?: string;
      /**
       * Metric Value
       * Format: json-string
       */
      metric_value?: string;
    };
    /** TestDataPointResponse */
    TestDataPointResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** TestRunItem */
    TestRunItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Mut Id
       * Format: uuid
       */
      mut_id: string;
      /**
       * Scenario Set Id
       * Format: uuid
       */
      scenario_set_id: string;
      /** Name */
      name?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /** Type */
      type?: string;
      /**
       * Start Time
       * Format: date-time
       */
      start_time?: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time?: string;
      /** Test Data Point Count */
      test_data_point_count?: number;
      /** Model Metrics */
      model_metrics?: Record<string, never>;
      /** Error Matrix */
      error_matrix?: unknown[];
      /**
       * App Link
       * @description This URL links to the Okareo webpage for this test run
       * @default
       */
      app_link?: string;
    };
    /** TestRunPayloadV2 */
    TestRunPayloadV2: {
      /**
       * Mut Id
       * Format: uuid
       * @description ID of the model
       */
      mut_id: string;
      /**
       * Api Keys
       * @description Dictionary that maps model type to the respective API keys
       */
      api_keys?: {
        [key: string]: string;
      };
      /**
       * Metrics Kwargs
       * @description Dictionary of metrics to be measured
       * @default {}
       */
      metrics_kwargs?: {
        [key: string]: number[] | string[];
      };
      /**
       * Name
       * @description Name of the test run
       */
      name?: string;
      /**
       * @description The type of test run will determine which relevant model metrics should be calculated
       * @default MULTI_CLASS_CLASSIFICATION
       */
      type?: components["schemas"]["TestRunType"];
      /**
       * Calculate Metrics
       * @description Boolean value indicating if metrics should be calculated for the test run
       * @default true
       */
      calculate_metrics?: boolean;
      /**
       * Tags
       * @description Tags are strings that can be used to filter test runs in the Okareo app
       * @default []
       */
      tags?: string[];
      /**
       * Scenario Id
       * Format: uuid
       * @description ID of the scenario set
       */
      scenario_id: string;
      /** Model Results */
      model_results?: Record<string, never>;
      /**
       * Checks
       * @description List of checks to include in the test run.
       */
      checks?: string[];
    };
    /**
     * TestRunType
     * @description An enumeration.
     * @enum {string}
     */
    TestRunType: "MULTI_CLASS_CLASSIFICATION" | "INFORMATION_RETRIEVAL" | "NL_GENERATION" | "AGENT_EVAL" | "invariant";
    /** UpdateTestDataPointPayload */
    UpdateTestDataPointPayload: {
      /**
       * Id
       * Format: uuid
       * @description ID of the datapoint
       */
      id?: string;
      /**
       * Tags
       * @description Tags are strings that can be used to filter test data points in the Okareo app
       * @default []
       */
      tags?: string[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Projects
   * @description Get a list of projects for this organization
   *
   * Returns:
   *     a list of requested projects
   */
  get_all_projects_v0_projects_get: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Project
   * @description Create a project
   *
   * Returns:
   *     the id, name, and tags for the created project
   */
  create_project_v0_projects_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Project
   * @description Get a project
   *
   * Returns:
   *     the requested project
   */
  get_project_v0_projects__project_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the project */
        project_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Project
   * @description Update a project
   *
   * Returns:
   *     the requested project
   */
  update_project_v0_projects__project_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description ID of the project */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Generate Api Token */
  generate_api_token_v0_generate_api_token_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Scenario Sets
   * @description Find all scenario sets based on either the project id or the scenario id
   *
   * Returns:
   *     a list of scenario sets (project id) or a list of scenarios (scenario id)
   */
  get_scenario_sets_v0_scenario_sets_get: {
    parameters: {
      query?: {
        /** @description The ID of the scenario set */
        scenario_id?: string;
        /** @description The ID of the project */
        project_id?: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Scenario Set
   * @description Triggers a generation of a test scenario set, could be long running.
   * This scenario set can now be used for testing on a model.
   *
   * Returns:
   *     Object: generation result with '201 Created' status code on success.
   */
  create_scenario_set_v0_scenario_sets_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScenarioSetCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Scenario Set
   * @description Update a Scenario Set
   *
   * Returns:
   *     the updated Scenario Set
   */
  update_scenario_set_v0_scenario_sets__scenario_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the scenario set to modify */
        scenario_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScenarioSetUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Scenario Set
   * @description Deletes the scenario set and cascades deletes to all related entities.
   * Namely, Evaluations, Evaluation Datapoints, and  Model Datapoints
   *
   * !! Use With Caution !!
   *
   * Raises:
   *     HTTPException: 404 if scenario_id is not found
   *
   * Returns: 204 status code on successful deletion
   */
  delete_scenario_set_v0_scenario_sets__scenario_id__delete: {
    parameters: {
      query: {
        /** @description Name of the Scenario Set to delete */
        name: string;
      };
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the Scenario Set to delete */
        scenario_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Scenario Sets Upload
   * @description Upload new scenarios
   *
   * Returns:
   *     the Scenario Set with the uploaded scenarios
   */
  scenario_sets_upload_v0_scenario_sets_upload_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_scenario_sets_upload_v0_scenario_sets_upload_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Scenario Sets Download
   * @description Get the scenario set for a particular scenario ID
   *
   * Returns:
   *     a list of scenarios
   */
  get_scenario_sets_download_v0_scenario_sets_download__scenario_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the scenario set */
        scenario_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Scenario Set Data Points
   * @description Get all scenarios datapoints
   *
   * Returns:
   *     a list of scenario datapoints
   */
  get_scenario_set_data_points_v0_scenario_data_points__scenario_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the scenario set to download */
        scenario_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScenarioDataPoinResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Generate Scenario Set
   * @description Triggers a generation of a scenario set based on source scenario ID, could be long running.
   * A registered model can now use this scenario set for testing.
   *
   * Returns:
   *     Object: generation result with '201 Created' status code on success.
   */
  generate_scenario_set_v0_scenario_sets_generate_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScenarioSetGenerate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Datapoints
   * @description Gets all the datapoints for given search criteria.
   *
   * Returns:
   *     list: An array of datapoint objects.
   */
  get_datapoints_v0_find_datapoints_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DatapointListItem"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Datapoints Summary
   * @description Expects a date range and returns a summary of datapoint counts by day and feedback range.
   *
   * Returns:
   *     list: An array of datapoint objects.
   */
  get_datapoints_summary_v0_summary_datapoints_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SummaryDatapointSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DatapointSummaryItem"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Add Datapoint
   * @description Add a datapoint for a particular registered model
   *
   * Returns:
   *     Empty ressponse with 201 status code on success.
   */
  add_datapoint_v0_datapoints_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatapointSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DatapointResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Register Model
   * @description Register a model for testing. This model can then be tested using a scenario set.
   *
   * Returns:
   *     the id of the registered model
   */
  register_model_v0_register_model_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelUnderTestSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Model Under Test
   * @description Get a model under test
   *
   * Returns:
   *     the requested model under test
   */
  get_model_under_test_v0_models_under_test__mut_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the model */
        mut_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Model Under Test
   * @description Update a model under test
   *
   * Returns:
   *     the updated model under test
   */
  update_model_under_test_v0_models_under_test__mut_id__put: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the model under test */
        mut_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelUnderTestSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get All Models Under Test
   * @description Get a list of models under test for this organization
   *
   * Returns:
   *     a list of requested models under test
   */
  get_all_models_under_test_v0_models_under_test_get: {
    parameters: {
      query?: {
        /** @description The ID of the project */
        project_id?: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ModelUnderTestResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Find Test Run
   * @description Find Test Runs
   *
   * Returns:
   *     a list of Test Runs
   */
  find_test_run_v0_find_test_runs_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralFindPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestRunItem"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Test Run
   * @description Get a Test Run
   *
   * Returns:
   *     the Test Run
   */
  get_test_run_v0_test_runs__test_run_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description ID of test run */
        test_run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestRunItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Run Test
   * @description Runs tests on a model (mut_id) using previously generated scenario.
   * Feeds the scenario data (scenario_id) into the model and evaulates results
   * depending on the test type specified.
   *
   * Returns:
   *     The test run data which includes the evaluated metrics from the run.
   */
  run_test_v0_test_run_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TestRunPayloadV2"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestRunItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Failure Scenario
   * @description Create a ScenarioSet using the failed data points from a TestRun.
   *
   * Returns:
   *     the new Failure Scenario response
   */
  create_failure_scenario_v0_test_run_create_failure_scenario__test_run_id__post: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the test run to use for getting failed scenario data points. */
        test_run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScenarioSetResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Add Test Data Point
   * @description Add a test run metric
   *
   * Returns:
   *     The persisted test run metric item
   */
  add_test_data_point_v0_test_data_point_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TestDataPointPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestDataPointResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Test Data Point
   * @description Get a Test Run
   *
   * Returns:
   *     the Test Run
   */
  get_test_data_point_v0_test_data_points__test_data_point_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        /** @description The ID of the test data point to return */
        test_data_point_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TestDataPointItem"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Find Test Data Points
   * @description Find Test Data Point
   *
   * Returns:
   *     a list of Test Data Points
   */
  find_test_data_points_v0_find_test_data_points_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FindTestDataPointPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": (components["schemas"]["FullDataPointItem"] | components["schemas"]["TestDataPointItem"])[];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Test Data Point
   * @description Find Test Data Point
   *
   * Returns:
   *     a list of Test Data Points
   */
  update_test_data_point_v0_update_test_data_point_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTestDataPointPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": string;
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Internal Custom Model Listener */
  internal_custom_model_listener_v0_internal_custom_model_listener_get: {
    parameters: {
      query: {
        mut_id: string;
      };
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Check Generate
   * @description Generate code for an evaluator for testing.
   * Returns:
   *     the evaluator object with the generated code
   */
  check_generate_v0_check_generate_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluatorSpecRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EvaluatorGenerateResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Check Create Or Update
   * @description Create or get check
   *
   * Returns:
   *     the check object with its ID
   */
  check_create_or_update_v0_check_create_or_update_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CheckCreateUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorDetailedResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Check
   * @description Get a check
   *
   * Raises:
   *     HTTPException: 404 if check_id is not found
   *
   * Returns: the check
   */
  get_check_v0_check__check_id__get: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        check_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EvaluatorDetailedResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Check Delete
   * @description Deletes a check
   *
   * Raises:
   *     HTTPException: 404 if check_id is not found
   *
   * Returns: 204 status code on successful deletion
   */
  check_delete_v0_check__check_id__delete: {
    parameters: {
      header: {
        "api-key": string;
      };
      path: {
        check_id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_check_delete_v0_check__check_id__delete"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get All Checks
   * @description Get a list of checks for this organization
   *
   * Returns:
   *     a list of requested checks
   */
  get_all_checks_v0_checks_get: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EvaluatorBriefResponse"][];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Check Upload
   * @description Upload a new check
   *
   * Returns:
   *     the check object with its ID
   */
  check_upload_v0_check_upload_post: {
    parameters: {
      header: {
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_check_upload_v0_check_upload_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorDetailedResponse"];
        };
      };
      /** @description Input data is incorrect */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Okareo API token has failed authentication */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Data is not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Input data is invalid */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
